{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hvWOBGu7NGQy",
        "outputId": "c48c7825-d9f7-4625-f874-4989883a8b58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# Load Packages #\n",
        "import os\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Load google Drive #\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Set Working Directory #\n",
        "os.chdir(\"/content/drive/MyDrive/DSO 585\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fF6_OSe7OUg8",
        "outputId": "0b92abbc-97fc-4b17-d51b-de70e655cc9a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
            "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
            "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
            "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
            "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
            "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
            "\n",
            "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
            "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
            "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
            "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
            "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
            "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
            "\n",
            "        V26       V27       V28  Amount  Class  \n",
            "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
            "1  0.125895 -0.008983  0.014724    2.69      0  \n",
            "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
            "3 -0.221929  0.062723  0.061458  123.50      0  \n",
            "4  0.502292  0.219422  0.215153   69.99      0  \n",
            "\n",
            "[5 rows x 31 columns]\n"
          ]
        }
      ],
      "source": [
        "# prompt: import creditcard.csv\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming 'creditcard.csv' is in your current working directory\n",
        "# as set in the previous code block.  If not, adjust the path accordingly.\n",
        "try:\n",
        "  df = pd.read_csv('creditcard.csv')\n",
        "  print(df.head()) # Print first 5 rows to verify import\n",
        "except FileNotFoundError:\n",
        "  print(\"Error: 'creditcard.csv' not found in the specified directory.\")\n",
        "except Exception as e:\n",
        "  print(f\"An error occurred: {e}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "l8J8x3GQO18i",
        "outputId": "963fc0f0-61ef-4042-d4f4-a768f6066957"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Time         V1         V2        V3        V4        V5  \\\n",
              "0            0.0  -1.359807  -0.072781  2.536347  1.378155 -0.338321   \n",
              "1            0.0   1.191857   0.266151  0.166480  0.448154  0.060018   \n",
              "2            1.0  -1.358354  -1.340163  1.773209  0.379780 -0.503198   \n",
              "3            1.0  -0.966272  -0.185226  1.792993 -0.863291 -0.010309   \n",
              "4            2.0  -1.158233   0.877737  1.548718  0.403034 -0.407193   \n",
              "...          ...        ...        ...       ...       ...       ...   \n",
              "284802  172786.0 -11.881118  10.071785 -9.834783 -2.066656 -5.364473   \n",
              "284803  172787.0  -0.732789  -0.055080  2.035030 -0.738589  0.868229   \n",
              "284804  172788.0   1.919565  -0.301254 -3.249640 -0.557828  2.630515   \n",
              "284805  172788.0  -0.240440   0.530483  0.702510  0.689799 -0.377961   \n",
              "284806  172792.0  -0.533413  -0.189733  0.703337 -0.506271 -0.012546   \n",
              "\n",
              "              V6        V7        V8        V9  ...       V21       V22  \\\n",
              "0       0.462388  0.239599  0.098698  0.363787  ... -0.018307  0.277838   \n",
              "1      -0.082361 -0.078803  0.085102 -0.255425  ... -0.225775 -0.638672   \n",
              "2       1.800499  0.791461  0.247676 -1.514654  ...  0.247998  0.771679   \n",
              "3       1.247203  0.237609  0.377436 -1.387024  ... -0.108300  0.005274   \n",
              "4       0.095921  0.592941 -0.270533  0.817739  ... -0.009431  0.798278   \n",
              "...          ...       ...       ...       ...  ...       ...       ...   \n",
              "284802 -2.606837 -4.918215  7.305334  1.914428  ...  0.213454  0.111864   \n",
              "284803  1.058415  0.024330  0.294869  0.584800  ...  0.214205  0.924384   \n",
              "284804  3.031260 -0.296827  0.708417  0.432454  ...  0.232045  0.578229   \n",
              "284805  0.623708 -0.686180  0.679145  0.392087  ...  0.265245  0.800049   \n",
              "284806 -0.649617  1.577006 -0.414650  0.486180  ...  0.261057  0.643078   \n",
              "\n",
              "             V23       V24       V25       V26       V27       V28  Amount  \\\n",
              "0      -0.110474  0.066928  0.128539 -0.189115  0.133558 -0.021053  149.62   \n",
              "1       0.101288 -0.339846  0.167170  0.125895 -0.008983  0.014724    2.69   \n",
              "2       0.909412 -0.689281 -0.327642 -0.139097 -0.055353 -0.059752  378.66   \n",
              "3      -0.190321 -1.175575  0.647376 -0.221929  0.062723  0.061458  123.50   \n",
              "4      -0.137458  0.141267 -0.206010  0.502292  0.219422  0.215153   69.99   \n",
              "...          ...       ...       ...       ...       ...       ...     ...   \n",
              "284802  1.014480 -0.509348  1.436807  0.250034  0.943651  0.823731    0.77   \n",
              "284803  0.012463 -1.016226 -0.606624 -0.395255  0.068472 -0.053527   24.79   \n",
              "284804 -0.037501  0.640134  0.265745 -0.087371  0.004455 -0.026561   67.88   \n",
              "284805 -0.163298  0.123205 -0.569159  0.546668  0.108821  0.104533   10.00   \n",
              "284806  0.376777  0.008797 -0.473649 -0.818267 -0.002415  0.013649  217.00   \n",
              "\n",
              "        Class  \n",
              "0           0  \n",
              "1           0  \n",
              "2           0  \n",
              "3           0  \n",
              "4           0  \n",
              "...       ...  \n",
              "284802      0  \n",
              "284803      0  \n",
              "284804      0  \n",
              "284805      0  \n",
              "284806      0  \n",
              "\n",
              "[284807 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27b2dfab-c1d6-4a73-8ad4-d5888d7c271e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>149.62</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>378.66</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>123.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>69.99</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284802</th>\n",
              "      <td>172786.0</td>\n",
              "      <td>-11.881118</td>\n",
              "      <td>10.071785</td>\n",
              "      <td>-9.834783</td>\n",
              "      <td>-2.066656</td>\n",
              "      <td>-5.364473</td>\n",
              "      <td>-2.606837</td>\n",
              "      <td>-4.918215</td>\n",
              "      <td>7.305334</td>\n",
              "      <td>1.914428</td>\n",
              "      <td>...</td>\n",
              "      <td>0.213454</td>\n",
              "      <td>0.111864</td>\n",
              "      <td>1.014480</td>\n",
              "      <td>-0.509348</td>\n",
              "      <td>1.436807</td>\n",
              "      <td>0.250034</td>\n",
              "      <td>0.943651</td>\n",
              "      <td>0.823731</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284803</th>\n",
              "      <td>172787.0</td>\n",
              "      <td>-0.732789</td>\n",
              "      <td>-0.055080</td>\n",
              "      <td>2.035030</td>\n",
              "      <td>-0.738589</td>\n",
              "      <td>0.868229</td>\n",
              "      <td>1.058415</td>\n",
              "      <td>0.024330</td>\n",
              "      <td>0.294869</td>\n",
              "      <td>0.584800</td>\n",
              "      <td>...</td>\n",
              "      <td>0.214205</td>\n",
              "      <td>0.924384</td>\n",
              "      <td>0.012463</td>\n",
              "      <td>-1.016226</td>\n",
              "      <td>-0.606624</td>\n",
              "      <td>-0.395255</td>\n",
              "      <td>0.068472</td>\n",
              "      <td>-0.053527</td>\n",
              "      <td>24.79</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284804</th>\n",
              "      <td>172788.0</td>\n",
              "      <td>1.919565</td>\n",
              "      <td>-0.301254</td>\n",
              "      <td>-3.249640</td>\n",
              "      <td>-0.557828</td>\n",
              "      <td>2.630515</td>\n",
              "      <td>3.031260</td>\n",
              "      <td>-0.296827</td>\n",
              "      <td>0.708417</td>\n",
              "      <td>0.432454</td>\n",
              "      <td>...</td>\n",
              "      <td>0.232045</td>\n",
              "      <td>0.578229</td>\n",
              "      <td>-0.037501</td>\n",
              "      <td>0.640134</td>\n",
              "      <td>0.265745</td>\n",
              "      <td>-0.087371</td>\n",
              "      <td>0.004455</td>\n",
              "      <td>-0.026561</td>\n",
              "      <td>67.88</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284805</th>\n",
              "      <td>172788.0</td>\n",
              "      <td>-0.240440</td>\n",
              "      <td>0.530483</td>\n",
              "      <td>0.702510</td>\n",
              "      <td>0.689799</td>\n",
              "      <td>-0.377961</td>\n",
              "      <td>0.623708</td>\n",
              "      <td>-0.686180</td>\n",
              "      <td>0.679145</td>\n",
              "      <td>0.392087</td>\n",
              "      <td>...</td>\n",
              "      <td>0.265245</td>\n",
              "      <td>0.800049</td>\n",
              "      <td>-0.163298</td>\n",
              "      <td>0.123205</td>\n",
              "      <td>-0.569159</td>\n",
              "      <td>0.546668</td>\n",
              "      <td>0.108821</td>\n",
              "      <td>0.104533</td>\n",
              "      <td>10.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284806</th>\n",
              "      <td>172792.0</td>\n",
              "      <td>-0.533413</td>\n",
              "      <td>-0.189733</td>\n",
              "      <td>0.703337</td>\n",
              "      <td>-0.506271</td>\n",
              "      <td>-0.012546</td>\n",
              "      <td>-0.649617</td>\n",
              "      <td>1.577006</td>\n",
              "      <td>-0.414650</td>\n",
              "      <td>0.486180</td>\n",
              "      <td>...</td>\n",
              "      <td>0.261057</td>\n",
              "      <td>0.643078</td>\n",
              "      <td>0.376777</td>\n",
              "      <td>0.008797</td>\n",
              "      <td>-0.473649</td>\n",
              "      <td>-0.818267</td>\n",
              "      <td>-0.002415</td>\n",
              "      <td>0.013649</td>\n",
              "      <td>217.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>284807 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27b2dfab-c1d6-4a73-8ad4-d5888d7c271e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27b2dfab-c1d6-4a73-8ad4-d5888d7c271e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27b2dfab-c1d6-4a73-8ad4-d5888d7c271e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ffeee1f6-60db-4609-bae6-ceabc2bc7ac7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ffeee1f6-60db-4609-bae6-ceabc2bc7ac7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ffeee1f6-60db-4609-bae6-ceabc2bc7ac7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_94b3fae5-b174-4b5a-91ef-8bd4f00cb922\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_94b3fae5-b174-4b5a-91ef-8bd4f00cb922 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vOh06yn6urs3"
      },
      "source": [
        "# **Decision Tree**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mtYhZ8ueO9Yd"
      },
      "outputs": [],
      "source": [
        "# prompt: use decision tree to train a model to predict fraud using df dataframe\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Assuming 'df' is already loaded as a pandas DataFrame\n",
        "\n",
        "# Define features (X) and target (y)\n",
        "X = df.drop('Class', axis=1)\n",
        "y = df['Class']\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)\n",
        "\n",
        "# Initialize and train the Decision Tree Classifier\n",
        "dt_classifier = DecisionTreeClassifier(random_state=42)  # You can adjust hyperparameters here\n",
        "\n",
        "path = dt_classifier.cost_complexity_pruning_path(X_train, y_train)\n",
        "\n",
        "ccp_alphas = path.ccp_alphas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MQh-U3kduujQ"
      },
      "outputs": [],
      "source": [
        "accuracies = []\n",
        "for ccp_alpha in ccp_alphas:\n",
        "\n",
        "    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n",
        "    clf.fit(X_train, y_train)\n",
        "    y_pred = clf.predict(X_train)\n",
        "    score = accuracy_score(y_train,y_pred)\n",
        "    accuracies.append(score)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AyFJRcZnux38"
      },
      "outputs": [],
      "source": [
        "alpha_cv = ccp_alphas[np.argmax(accuracies)]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alpha_cv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fqYo9BnpOYsl",
        "outputId": "982ef879-f07d-42ce-d5b9-76a044c4af0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.0)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D2q17azOv0j3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "outputId": "138a4a4e-bf7b-4922-9b6c-15c8dc350a10"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=np.float64(0.0), random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(ccp_alpha=np.float64(0.0), random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(ccp_alpha=np.float64(0.0), random_state=0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "clf_tree_final = DecisionTreeClassifier(random_state=0, ccp_alpha=alpha_cv)\n",
        "clf_tree_final.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "EX9obkYZfSHx",
        "outputId": "407716ca-7dd1-42dd-a0f5-994d36dcb42f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Metric     Value\n",
              "0           Accuracy  0.999105\n",
              "1  TPR (Sensitivity)  0.734694\n",
              "2  TNR (Specificity)  0.999560\n",
              "3    PPV (Precision)  0.742268\n",
              "4           F1-score  0.738462"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b367e5f5-cb91-4c4e-bb55-5624c71714c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Metric</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Accuracy</td>\n",
              "      <td>0.999105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TPR (Sensitivity)</td>\n",
              "      <td>0.734694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TNR (Specificity)</td>\n",
              "      <td>0.999560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>PPV (Precision)</td>\n",
              "      <td>0.742268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>F1-score</td>\n",
              "      <td>0.738462</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b367e5f5-cb91-4c4e-bb55-5624c71714c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b367e5f5-cb91-4c4e-bb55-5624c71714c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b367e5f5-cb91-4c4e-bb55-5624c71714c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2530bb4d-9c62-4474-a9fe-4c8f04e1e677\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2530bb4d-9c62-4474-a9fe-4c8f04e1e677')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2530bb4d-9c62-4474-a9fe-4c8f04e1e677 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_168898cf-1fc0-466c-b44e-2590a00edbeb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_168898cf-1fc0-466c-b44e-2590a00edbeb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"TPR (Sensitivity)\",\n          \"F1-score\",\n          \"TNR (Specificity)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1429030080893888,\n        \"min\": 0.7346938775510204,\n        \"max\": 0.9995603545301069,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7346938775510204,\n          0.7384615384615385,\n          0.9995603545301069\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# prompt: print metrics for accuracy, tpr, tng, ppv, and f-1 in a table\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\n",
        "\n",
        "# Assuming y_test and y_pred are already defined from your previous code\n",
        "y_pred = clf_tree_final.predict(X_test)\n",
        "# Calculate metrics\n",
        "accuracy_dt = accuracy_score(y_test,y_pred)\n",
        "tpr_dt = recall_score(y_test, y_pred, pos_label=1)  # Sensitivity or True Positive Rate\n",
        "tnr_dt = recall_score(y_test, y_pred, pos_label=0)  # Specificity or True Negative Rate\n",
        "ppv_dt = precision_score(y_test, y_pred, pos_label=1) # Positive Predictive Value\n",
        "f1_dt = f1_score(y_test, y_pred, pos_label=1)\n",
        "\n",
        "\n",
        "# Create a table using pandas DataFrame\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Metric': ['Accuracy', 'TPR (Sensitivity)', 'TNR (Specificity)', 'PPV (Precision)', 'F1-score'],\n",
        "    'Value': [accuracy_dt, tpr_dt, tnr_dt, ppv_dt, f1_dt]\n",
        "})\n",
        "\n",
        "metrics_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "p5FuRru_cPO0",
        "outputId": "58740e9e-25ef-43cb-b7dc-c0397d14eac8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# prompt: make roc curve for decision tree\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "# Assuming y_test and y_pred are already defined from your previous code\n",
        "\n",
        "# Get predicted probabilities for the positive class\n",
        "y_pred_proba = clf_tree_final.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Calculate the ROC curve\n",
        "fpr_dt, tpr_dt, thresholds = roc_curve(y_test, y_pred_proba, pos_label = 1)\n",
        "\n",
        "# Calculate the AUC (Area Under the Curve)\n",
        "roc_auc_dt = auc(fpr_dt, tpr_dt)\n",
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr_dt, tpr_dt, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_dt)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "precision_dt, recall_dt, thresholds = precision_recall_curve(y_test, y_pred_proba)\n",
        "pr_auc_dt = average_precision_score(y_test, y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall_dt, precision_dt, color='b', label='PR curve (area = %0.2f)' % pr_auc_dt)\n",
        "\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "pmjyf_JKXnUm",
        "outputId": "05b8bc98-5302-4dd0-f9c9-1da0eede7d75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Logistics**"
      ],
      "metadata": {
        "id": "WttgNhp1RgR6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "kgYJ7crIRvZ7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LogisticRegression()\n",
        "# training the Logistic Regression Model with Training Data\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "9BbRV8RHRwb0",
        "outputId": "bb259422-559a-4d2b-ee6e-1d6d99fe5a86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: make roc curve for decision tree\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "# Assuming y_test and y_pred are already defined from your previous code\n",
        "\n",
        "# Get predicted probabilities for the positive class\n",
        "y_pred_proba = model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Calculate the ROC curve\n",
        "fpr_lr, tpr_lr, thresholds = roc_curve(y_test, y_pred_proba, pos_label = 1)\n",
        "\n",
        "# Calculate the AUC (Area Under the Curve)\n",
        "roc_auc_lr = auc(fpr_lr, tpr_lr)\n",
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr_lr, tpr_lr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_lr)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "4Hw0JmkkS76a",
        "outputId": "b4a69026-dd2b-437a-decb-e815a245bf33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "precision_lr, recall_lr, thresholds = precision_recall_curve(y_test, y_pred_proba)\n",
        "pr_auc_lr = average_precision_score(y_test,y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall_lr, precision_lr, color='b', label='ROC curve (area = %0.2f)' % pr_auc_lr)\n",
        "plt.fill_between(recall_lr, precision_lr, color='skyblue', alpha=0.4)\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "b6tbaGmwX9Ye",
        "outputId": "627a62fe-e5bd-43c4-d213-efa778928c1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest"
      ],
      "metadata": {
        "id": "S6URuQnETLbX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import \\\n",
        "( RandomForestClassifier as RF ,\n",
        "GradientBoostingClassifier as GBC)\n",
        "from sklearn.metrics import (accuracy_score ,\n",
        "log_loss )"
      ],
      "metadata": {
        "id": "OX4T705uUCG1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bag_card = RF(max_features='sqrt', random_state=42)\n",
        "bag_card.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "b6bOntnfUDDE",
        "outputId": "21ee88ef-b353-4ac1-bebb-e19eef6c421b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_prob_bag = bag_card.predict_proba(X_test)[:, 1]\n",
        "fpr_rf, tpr_rf, thresholds = roc_curve(y_test, y_prob_bag, pos_label=1)\n",
        "roc_auc_rf = auc(fpr_rf, tpr_rf)"
      ],
      "metadata": {
        "id": "27vul7jwUJ1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr_rf, tpr_rf, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_rf)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "BbyqQ18AUR0s",
        "outputId": "6070f560-5e16-4609-885f-8ad3d3fa768f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "precision_rf, recall_rf, thresholds = precision_recall_curve(y_test, y_prob_bag)\n",
        "pr_auc_rf = average_precision_score(y_test, y_prob_bag)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall_rf, precision_rf, color='b', label='ROC curve (area = %0.2f)' % pr_auc_rf)\n",
        "plt.fill_between(recall_rf, precision_rf, color='skyblue', alpha=0.4)\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "wnv7f-82UWJm",
        "outputId": "0e5c7ce5-306b-41f3-e038-2da935cc31d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIjCAYAAAAQgZNYAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAWVZJREFUeJzt3Xd4FNX+x/HPbJLd9FBCQouEIiAdgiAiIhqlKIoXlAtIU2zA7yrYQESsIBYEvRTlCui9KCg2FAQRRaUoCgQVkI4gklCUJARI2/P7I2QhppCEJJuB9+t55snu2TM739lJ4JOTMzOWMcYIAAAAsCGHtwsAAAAAioswCwAAANsizAIAAMC2CLMAAACwLcIsAAAAbIswCwAAANsizAIAAMC2CLMAAACwLcIsAAAAbIswC+CCMWjQIEVHRxdpnRUrVsiyLK1YsaJUarK7q666SldddZXn+Z49e2RZlubMmeO1mgBcWAizAErNnDlzZFmWZ/H391f9+vU1fPhwJSQkeLu8ci87GGYvDodDlSpVUteuXbVmzRpvl1ciEhIS9OCDD6phw4YKDAxUUFCQYmJi9Mwzz+jo0aPeLg+ADfh6uwAA57+nnnpKtWvX1smTJ7Vy5UpNnz5dixcv1i+//KLAwMAyq2PmzJlyu91FWufKK6/UiRMn5HQ6S6mqs+vTp4+6deumzMxMbdu2TdOmTVOnTp30ww8/qGnTpl6r61z98MMP6tatm44dO6bbbrtNMTExkqQff/xRzz33nL755ht9/vnnXq4SQHlHmAVQ6rp27arWrVtLkoYMGaLKlStr0qRJ+vjjj9WnT58810lJSVFQUFCJ1uHn51fkdRwOh/z9/Uu0jqJq1aqVbrvtNs/zDh06qGvXrpo+fbqmTZvmxcqK7+jRo7r55pvl4+OjDRs2qGHDhjlef/bZZzVz5swS2VZpfC8BKD+YZgCgzF199dWSpN27d0vKmssaHBysnTt3qlu3bgoJCVG/fv0kSW63W5MnT1bjxo3l7++vyMhI3X333frrr79yve9nn32mjh07KiQkRKGhobr00kv19ttve17Pa87svHnzFBMT41mnadOmmjJliuf1/ObMvvfee4qJiVFAQIDCw8N12223af/+/Tn6ZO/X/v371aNHDwUHB6tKlSp68MEHlZmZWezPr0OHDpKknTt35mg/evSo7r//fkVFRcnlcqlevXqaOHFirtFot9utKVOmqGnTpvL391eVKlXUpUsX/fjjj54+s2fP1tVXX62IiAi5XC41atRI06dPL3bNf/faa69p//79mjRpUq4gK0mRkZF67LHHPM8ty9ITTzyRq190dLQGDRrkeZ49teXrr7/W0KFDFRERoZo1a2rBggWe9rxqsSxLv/zyi6ft119/Va9evVSpUiX5+/urdevWWrhw4bntNIBSwcgsgDKXHcIqV67sacvIyFDnzp11xRVX6MUXX/RMP7j77rs1Z84cDR48WP/617+0e/du/fvf/9aGDRu0atUqz2jrnDlzdPvtt6tx48YaPXq0KlSooA0bNmjJkiXq27dvnnUsW7ZMffr00TXXXKOJEydKkrZs2aJVq1bpvvvuy7f+7HouvfRSTZgwQQkJCZoyZYpWrVqlDRs2qEKFCp6+mZmZ6ty5s9q2basXX3xRX3zxhV566SXVrVtX9957b7E+vz179kiSKlas6Gk7fvy4OnbsqP379+vuu+/WRRddpNWrV2v06NE6cOCAJk+e7Ol7xx13aM6cOeratauGDBmijIwMffvtt/ruu+88I+jTp09X48aNdeONN8rX11effPKJhg4dKrfbrWHDhhWr7jMtXLhQAQEB6tWr1zm/V16GDh2qKlWq6PHHH1dKSoquv/56BQcH691331XHjh1z9J0/f74aN26sJk2aSJI2bdqk9u3bq0aNGho1apSCgoL07rvvqkePHnr//fd18803l0rNAIrJAEApmT17tpFkvvjiC3Po0CGzb98+M2/ePFO5cmUTEBBgfv/9d2OMMQMHDjSSzKhRo3Ks/+233xpJZu7cuTnalyxZkqP96NGjJiQkxLRt29acOHEiR1+32+15PHDgQFOrVi3P8/vuu8+EhoaajIyMfPfhq6++MpLMV199ZYwxJi0tzURERJgmTZrk2Nann35qJJnHH388x/YkmaeeeirHe7Zs2dLExMTku81su3fvNpLMk08+aQ4dOmTi4+PNt99+ay699FIjybz33nuevk8//bQJCgoy27Zty/Eeo0aNMj4+Pmbv3r3GGGO+/PJLI8n861//yrW9Mz+r48eP53q9c+fOpk6dOjnaOnbsaDp27Jir5tmzZxe4bxUrVjTNmzcvsM+ZJJlx48blaq9Vq5YZOHCg53n299wVV1yR67j26dPHRERE5Gg/cOCAcTgcOY7RNddcY5o2bWpOnjzpaXO73ebyyy83F198caFrBlA2mGYAoNTFxsaqSpUqioqK0j//+U8FBwfrww8/VI0aNXL0+/tI5XvvvaewsDBde+21Onz4sGeJiYlRcHCwvvrqK0lZI6zJyckaNWpUrvmtlmXlW1eFChWUkpKiZcuWFXpffvzxRx08eFBDhw7Nsa3rr79eDRs21KJFi3Ktc8899+R43qFDB+3atavQ2xw3bpyqVKmiqlWrqkOHDtqyZYteeumlHKOa7733njp06KCKFSvm+KxiY2OVmZmpb775RpL0/vvvy7IsjRs3Ltd2zvysAgICPI8TExN1+PBhdezYUbt27VJiYmKha89PUlKSQkJCzvl98nPnnXfKx8cnR1vv3r118ODBHFNGFixYILfbrd69e0uS/vzzT3355Ze69dZblZyc7Pkcjxw5os6dO2v79u25ppMA8C6mGQAodVOnTlX9+vXl6+uryMhINWjQQA5Hzt+lfX19VbNmzRxt27dvV2JioiIiIvJ834MHD0o6PW0h+8/EhTV06FC9++676tq1q2rUqKHrrrtOt956q7p06ZLvOr/99pskqUGDBrlea9iwoVauXJmjLXtO6pkqVqyYY87voUOHcsyhDQ4OVnBwsOf5XXfdpVtuuUUnT57Ul19+qVdeeSXXnNvt27frp59+yrWtbGd+VtWrV1elSpXy3UdJWrVqlcaNG6c1a9bo+PHjOV5LTExUWFhYgeufTWhoqJKTk8/pPQpSu3btXG1dunRRWFiY5s+fr2uuuUZS1hSDFi1aqH79+pKkHTt2yBijsWPHauzYsXm+98GDB3P9IgbAewizAEpdmzZtPHMx8+NyuXIFXLfbrYiICM2dOzfPdfILboUVERGhuLg4LV26VJ999pk+++wzzZ49WwMGDNCbb755Tu+d7e+jg3m59NJLPSFZyhqJPfNkp4svvlixsbGSpBtuuEE+Pj4aNWqUOnXq5Plc3W63rr32Wj388MN5biM7rBXGzp07dc0116hhw4aaNGmSoqKi5HQ6tXjxYr388stFvrxZXho2bKi4uDilpaWd02XP8juR7syR5Wwul0s9evTQhx9+qGnTpikhIUGrVq3S+PHjPX2y9+3BBx9U586d83zvevXqFbteACWPMAug3Kpbt66++OILtW/fPs9wcmY/Sfrll1+KHDScTqe6d++u7t27y+12a+jQoXrttdc0duzYPN+rVq1akqStW7d6rsqQbevWrZ7Xi2Lu3Lk6ceKE53mdOnUK7D9mzBjNnDlTjz32mJYsWSIp6zM4duyYJ/Tmp27dulq6dKn+/PPPfEdnP/nkE6WmpmrhwoW66KKLPO3Z0zpKQvfu3bVmzRq9//77+V6e7UwVK1bMdROFtLQ0HThwoEjb7d27t958800tX75cW7ZskTHGM8VAOv3Z+/n5nfWzBFA+MGcWQLl16623KjMzU08//XSu1zIyMjzh5rrrrlNISIgmTJigkydP5uhnjMn3/Y8cOZLjucPhULNmzSRJqampea7TunVrRUREaMaMGTn6fPbZZ9qyZYuuv/76Qu3bmdq3b6/Y2FjPcrYwW6FCBd19991aunSp4uLiJGV9VmvWrNHSpUtz9T969KgyMjIkST179pQxRk8++WSuftmfVfZo8pmfXWJiombPnl3kfcvPPffco2rVqumBBx7Qtm3bcr1+8OBBPfPMM57ndevW9cz7zfb6668X+RJnsbGxqlSpkubPn6/58+erTZs2OaYkRERE6KqrrtJrr72WZ1A+dOhQkbYHoPQxMgug3OrYsaPuvvtuTZgwQXFxcbruuuvk5+en7du367333tOUKVPUq1cvhYaG6uWXX9aQIUN06aWXqm/fvqpYsaI2btyo48eP5ztlYMiQIfrzzz919dVXq2bNmvrtt9/06quvqkWLFrrkkkvyXMfPz08TJ07U4MGD1bFjR/Xp08dzaa7o6GiNGDGiND8Sj/vuu0+TJ0/Wc889p3nz5umhhx7SwoULdcMNN2jQoEGKiYlRSkqKfv75Zy1YsEB79uxReHi4OnXqpP79++uVV17R9u3b1aVLF7ndbn377bfq1KmThg8fruuuu84zYn333Xfr2LFjmjlzpiIiIoo8EpqfihUr6sMPP1S3bt3UokWLHHcAW79+vd555x21a9fO03/IkCG655571LNnT1177bXauHGjli5dqvDw8CJt18/PT//4xz80b948paSk6MUXX8zVZ+rUqbriiivUtGlT3XnnnapTp44SEhK0Zs0a/f7779q4ceO57TyAkuXNSykAOL9lXybphx9+KLDfwIEDTVBQUL6vv/766yYmJsYEBASYkJAQ07RpU/Pwww+bP/74I0e/hQsXmssvv9wEBASY0NBQ06ZN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IT3++OOKj49XixYttGTJEs9JYXv37pXDcTpvR0VFaenSpRoxYoSaNWumGjVq6L777tMjjzzirV0AAACAF3k1zErS8OHDNXz48DxfW7FiRa62du3a6bvvvivlqgAAAGAHtrqaAQAAAHAmwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLaKddOEzMxMzZkzR8uXL9fBgwfldrtzvP7ll1+WSHEAAABAQYoVZu+77z7NmTNH119/vZo0aSLLskq6LgAAAOCsihVm582bp3fffVfdunUr6XoAAACAQivWnFmn06l69eqVdC0AAABAkRQrzD7wwAOaMmWKjDElXQ8AAABQaMWaZrBy5Up99dVX+uyzz9S4cWP5+fnleP2DDz4okeIAAACAghQrzFaoUEE333xzSdcCAAAAFEmxwuzs2bNLug4AAACgyIoVZrMdOnRIW7dulSQ1aNBAVapUKZGiAAAAgMIo1glgKSkpuv3221WtWjVdeeWVuvLKK1W9enXdcccdOn78eEnXCAAAAOSpWGF25MiR+vrrr/XJJ5/o6NGjOnr0qD7++GN9/fXXeuCBB0q6RgAAACBPxZpm8P7772vBggW66qqrPG3dunVTQECAbr31Vk2fPr2k6gMAAADyVayR2ePHjysyMjJXe0REBNMMAAAAUGaKFWbbtWuncePG6eTJk562EydO6Mknn1S7du1KrDgAAACgIMWaZjBlyhR17txZNWvWVPPmzSVJGzdulL+/v5YuXVqiBQIAAAD5KVaYbdKkibZv3665c+fq119/lST16dNH/fr1U0BAQIkWCAAAUF5l3wT1WLJ367iQFfs6s4GBgbrzzjtLshYAAABbadDUSJJ+Xm95uZILV6HD7MKFC9W1a1f5+flp4cKFBfa98cYbz7kwAACA8q5Rc7ccDqOEPxzavc+t2lHFOh0J56DQYbZHjx6Kj49XRESEevTokW8/y7KUmZlZErUBAACUa4HBUp0GRju2WFq5xqh2lLcruvAU+tcHt9utiIgIz+P8FoIsAAC4kDRr7ZYkffedlwu5QJXYWPjRo0dL6q0AAABso0mrrHmzP6xl3qw3FCvMTpw4UfPnz/c8v+WWW1SpUiXVqFFDGzduLLHiAAAAyrumMVkjs79ssJSeYbxczYWnWGF2xowZiorKmhSybNkyffHFF1qyZIm6du2qhx56qEQLBAAAKM9q1zcKDDI6cdzS+o2E2bJWrEtzxcfHe8Lsp59+qltvvVXXXXedoqOj1bZt2xItEAAAoDzz8ZEat3Lrh299tOo7o7Yx3q7owlKskdmKFStq3759kqQlS5YoNjZWkmSM4QQwAABwwWl6at7s9997uZALULFGZv/xj3+ob9++uvjii3XkyBF17dpVkrRhwwbVq1evRAsEAAAo75qcmje77gdOAitrxQqzL7/8sqKjo7Vv3z49//zzCg4OliQdOHBAQ4cOLdECAQAAyrumrbLC7K6tlv48alSpAqG2rFjGmAtqpnJSUpLCwsKUmJio0NDQMtnm9qOp2nssXZX9i333YAAAUM51a+XUgX0OffxZpm7s4uPtcmytKHmN29kCAACUgKatjA7sk9Z8L93YxdvVXDi4nS0AAEAJaNrarc8/9tEPnARWpgodZt1ud56PAQAAIDU5NW92w48Oud1GDgfzZstCid3OFgAA4ELWsKmRj6/Rn4csbd91QZ2S5FXFCrP/+te/9Morr+Rq//e//63777//XGsCAACwHf8AqUGTrBC7co2Xi7mAFCvMvv/++2rfvn2u9ssvv1wLFiw456IAAADsKPsSXd99z8hsWSlWmD1y5IjCwsJytYeGhurw4cPnXBQAAIAdZd884UdunlBmihVm69WrpyVLluRq/+yzz1SnTp1zLgoAAMCOmsZkjchu3mjpZCqjs2WhWFfxHzlypIYPH65Dhw7p6quvliQtX75cL730kiZPnlyS9QEAANjGRXWMQisaJf1lae0Gt668jBHa0lasMHv77bcrNTVVzz77rJ5++mlJUnR0tKZPn64BAwaUaIEAAAB2YVlSk5Zurf7SR6vWGF15mbcrOv8V+/6q9957r+69914dOnRIAQEBCg4OLsm6AAAAbKlZ66wwu5abJ5SJYl9nNiMjQ1988YU++OADGZM1J+SPP/7QsWPHSqw4AAAAu2nSKisXrecksDJRrJHZ3377TV26dNHevXuVmpqqa6+9ViEhIZo4caJSU1M1Y8aMkq4TAADAFrLvBLZ3l0Pxh4yqViHUlqZijczed999at26tf766y8FBAR42m+++WYtX768xIoDAACwm7CK0kV1swLtyu/cXq7m/Feskdlvv/1Wq1evltPpzNEeHR2t/fv3l0hhAAAAdhUVbbR3p/T7H1yeq7QVa2TW7XYrMzMzV/vvv/+ukJCQcy4KAADAzqxTMwuIsqWvWGH2uuuuy3E9WcuydOzYMY0bN07dunUrqdoAAACAAhVrmsGLL76oLl26qFGjRjp58qT69u2r7du3Kzw8XO+8805J1wgAAADkqVhhNioqShs3btT8+fO1ceNGHTt2THfccYf69euX44QwAAAAoDQVOcymp6erYcOG+vTTT9WvXz/169evNOoCAAAAzqrIc2b9/Px08uTJ0qgFAAAAKJJinQA2bNgwTZw4URkZGSVdDwAAAFBoxZoz+8MPP2j58uX6/PPP1bRpUwUFBeV4/YMPPiiR4gAAAICCFCvMVqhQQT179izpWgAAAIAiKVKYdbvdeuGFF7Rt2zalpaXp6quv1hNPPMEVDAAAAOAVRZoz++yzz+rRRx9VcHCwatSooVdeeUXDhg0rrdoAAACAAhUpzL711luaNm2ali5dqo8++kiffPKJ5s6dK7fbXVr1AQAAAPkqUpjdu3dvjtvVxsbGyrIs/fHHHyVeGAAAAHA2RQqzGRkZ8vf3z9Hm5+en9PT0Ei0KAAAAKIwinQBmjNGgQYPkcrk8bSdPntQ999yT4/JcXJoLAAAAZaFIYXbgwIG52m677bYSKwYAAAAoiiKF2dmzZ5dWHQAAAECRFet2tgAAAEB5QJgFAACAbRFmAQAAYFuEWQAAANgWYRYAAAC2VS7C7NSpUxUdHS1/f3+1bdtWa9euLdR68+bNk2VZ6tGjR+kWCAAAgHLJ62F2/vz5GjlypMaNG6f169erefPm6ty5sw4ePFjgenv27NGDDz6oDh06lFGlAAAAKG+8HmYnTZqkO++8U4MHD1ajRo00Y8YMBQYGatasWfmuk5mZqX79+unJJ59UnTp1yrBaAAAAlCdeDbNpaWlat26dYmNjPW0Oh0OxsbFas2ZNvus99dRTioiI0B133HHWbaSmpiopKSnHAgAAgPODV8Ps4cOHlZmZqcjIyBztkZGRio+Pz3OdlStX6o033tDMmTMLtY0JEyYoLCzMs0RFRZ1z3QAAACgfvD7NoCiSk5PVv39/zZw5U+Hh4YVaZ/To0UpMTPQs+/btK+UqAQAAUFZ8vbnx8PBw+fj4KCEhIUd7QkKCqlatmqv/zp07tWfPHnXv3t3T5na7JUm+vr7aunWr6tatm2Mdl8sll8tVCtUDAADA27w6Mut0OhUTE6Ply5d72txut5YvX6527drl6t+wYUP9/PPPiouL8yw33nijOnXqpLi4OKYQAAAAXGC8OjIrSSNHjtTAgQPVunVrtWnTRpMnT1ZKSooGDx4sSRowYIBq1KihCRMmyN/fX02aNMmxfoUKFSQpVzsAAADOf14Ps71799ahQ4f0+OOPKz4+Xi1atNCSJUs8J4Xt3btXDoetpvYCAACgjHg9zErS8OHDNXz48DxfW7FiRYHrzpkzp+QLAgAAgC0w5AkAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbKhdhdurUqYqOjpa/v7/atm2rtWvX5tt35syZ6tChgypWrKiKFSsqNja2wP4AAAA4f3k9zM6fP18jR47UuHHjtH79ejVv3lydO3fWwYMH8+y/YsUK9enTR1999ZXWrFmjqKgoXXfdddq/f38ZVw4AAHAWxtsFnP+8HmYnTZqkO++8U4MHD1ajRo00Y8YMBQYGatasWXn2nzt3roYOHaoWLVqoYcOG+s9//iO3263ly5eXceUAAAB5C6uU9XX/75Z3C7kAeDXMpqWlad26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8XpmZqbGjx+vd999V/v371daWppSU1MVEhRUYI1bfvlJ36xYociKobm2c2DvbrVo3FDbt2/X448/ru+//16HDx+W+9RdCg4f+F1BLZvlWWNQZHi+n+fZBJ6qL8DXkfMz97EKPL4rVqzQSxMnaNq0aWrbtq127Nih++67T7WintXYsWNz9X/jjTfUtWvXPH9RCggI0PHjx4tVf2F5NcyGh4fLx8dHCQkJOdoTEhJUtWrVPNepWrVqkfq7XC65XK6SKRgAcEGxLBX6T/3eFhQUpHr16kmSZs2apebNm+uNN97QHXfcIUmqX7++EhMT9ccff+QKHWlpadq5c6c6derk6bty5Uqlp6fLL6+huHwEBAQU+LrD4ZD525+209PT89yXv+vXr586duyogwcPatmyZQoICFCXLl0kZU1vkKRFixapxhnzXyUVmAHCw8P1119/5Wh74YUXNGXKFE2ePFlNmzZVUFCQ7r///lwnef29xmPHjql79+6aOHFiru1Uq1ZNktS9e3fVqlVLM2fOVPXq1eV2u9WkSZMCTyAbP368xo8fn+/rkrR582ZdlMc0g+LkLEkaO3as+vfvryFDhkiSmjZtqpSUFN11110aM2ZMjikRv/32m7744gt98MEHeb7Xn3/+qSpVqhRY/7ny6glgTqdTMTExWr58uafN7XZr+fLlateuXZ7rtGvXLkd/SVq2bFm+/QEAuNA4HA49+uijeuyxx3TixAlJUs+ePeXn56eXXnopV/8ZM2YoJSVFffr0kST17dtXx44d07Rp0/J8/6NHj+bZ3qxZM8XFxeV76a4qVarowIEDOdri4uIKtU+XX365oqKiNH/+fM2dO1e33HKLJ2g3atRILpdLe/fuVb169XIsBf01tmXLltq8eXOOtlWrVummm27SbbfdpubNm6tOnTratm3bWetr1aqVNm3apOjo6Fw1BAUF6ciRI9q6dasee+wxXXPNNbrkkktyBem83HPPPYqLiytwyWtEVCpezpKk48eP55rD6+OTNV3y77+MzJ49WxEREbr++uvzfK9ffvlFLVu2POt+nhPjZfPmzTMul8vMmTPHbN682dx1112mQoUKJj4+3hhjTP/+/c2oUaM8/VetWmV8fX3Niy++aLZs2WLGjRtn/Pz8zM8//1yo7SUmJhpJJjExsVT2BwBgTydOnDCbN282J06c8HYpRTZw4EBz00035WhLT083NWrUMC+88IKn7eWXXzYOh8M8+uijZsuWLWbHjh3mpZdeMi6XyzzwwAM51n/44YeNj4+Peeihh8zq1avNnj17zBdffGF69eplJk+enGcdqamppn79+qZDhw5m5cqVZufOnWbBggVm9erVxhhjlixZYizLMm+++abZtm2befzxx01oaKjp2LGj5z06duxo7rvvvjzff8yYMaZRo0bG19fXfPvtt7leq1y5spkzZ47ZsWOHWbdunXnllVfMnDlz8v3cFi5caCIiIkxGRoanbcSIESYqKsqsWrXKbN682QwZMsSEhobm+HzzqnH//v2mSpUqplevXmbt2rVmx44dZsmSJWbQoEEmIyPDZGZmmsqVK5vbbrvNbN++3SxfvtxceumlRpL58MMP863xXJ0tZxmTO2uNGzfOhISEmHfeecfs2rXLfP7556Zu3brm1ltvzfHemZmZ5qKLLjKPPPJIvtuvVauWeeutt/J8raCfuaLkNa+HWWOMefXVV81FF11knE6nadOmjfnuu+88r3Xs2NEMHDgwR/93333X1K9f3zidTtO4cWOzaNGiQm+LMAsAyMv5FmaNMWbChAmmSpUq5tixY562jz/+2HTo0MEEBQUZf39/ExMTY2bNmpXn+86fP99ceeWVJiQkxAQFBZlmzZqZp556yvz111/51rJnzx7Ts2dPExoaagIDA03r1q3N999/73n98ccfN5GRkSYsLMyMGDHCDB8+vNBhdvPmzUaSqVWrlnG73Tlec7vdZvLkyaZBgwbGz8/PVKlSxXTu3Nl8/fXX+daanp5uqlevbpYsWeJpO3LkiLnppptMcHCwiYiIMI899pgZMGDAWcOsMcZs27bN3HzzzaZChQomICDANGzY0Nx///2eWpctW2YuueQS43K5TLNmzcyKFStKPcwaU3DOyt6fM7NWenq6eeKJJ0zdunWNv7+/iYqKMkOHDs113JcuXWokma1bt+a53dWrV5sKFSqY48eP5/l6SYVZy5ji3qjMnpKSkhQWFqbExESFhuaepA0AuDCdPHlSu3fvVu3ateXv7+/tclBGpk6dqoULF2rp0qXeLuW807t3bzVv3lyPPvponq8X9DNXlLx23l/NAAAAID933323jh49quTk5PP6lrZlLS0tTU2bNtWIESNKfVuEWQAAcMHy9fXVmDFjvF3Gecfp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34waNcrTf9WqVcbX19e8+OKLZsuWLWbcuHFcmsvLinoMn3vuOeN0Os2CBQvMgQMHPEtycrK3duGCV9Rj+HdczcD7inoM9+7da0JCQszw4cPN1q1bzaeffmoiIiLMM888461duKAV9fiNGzfOhISEmHfeecfs2rXLfP7556Zu3brm1ltv9dYuXPCSk5PNhg0bzIYNG4wkM2nSJLNhwwbz22+/GWOMGTVqlOnfv7+nf/aluR566CGzZcsWM3XqVC7NZWevvvqqueiii4zT6TRt2rQx3333nee1jh07moEDB+bo/+6775r69esbp9NpGjdubBYtWlTGFePvinIMa9WqZSTlWsaNG1f2hcOjqD+HZyLMlg9FPYarV682bdu2NS6Xy9SpU8c8++yzJiMjo4yrRraiHL/09HTzxBNPmLp16xp/f38TFRVlhg4dav7666+yLxzGGGO++uqrPP9vyz5uAwcONB07dsy1TosWLYzT6TR16tQxs2fPLvO6jTHGMobxfAAAANgTc2YBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYB4AJmWZY++ugjSdKePXtkWZbi4uK8WhMAFAVhFgC8ZNCgQbIsS5Zlyc/PT7Vr19bDDz+skydPers0ALANX28XAAAXsi5dumj27NlKT0/XunXrNHDgQFmWpYkTJ3q7NACwBUZmAcCLXC6XqlatqqioKPXo0UOxsbFatmyZJMntdmvChAmqXbu2AgIC1Lx5cy1YsCDH+ps2bdINN9yg0NBQhYSEqEOHDtq5c6ck6YcfftC1116r8PBwhYWFqWPHjlq/fn2Z7yMAlCbCLACUE7/88otWr14tp9MpSZowYYLeeustzZgxQ5s2bdKIESN022236euvv5Yk7d+/X1deeaVcLpe+/PJLrVu3TrfffrsyMjIkScnJyRo4cKBWrlyp7777ThdffLG6deum5ORkr+0jAJQ0phkAgBd9+umnCg4OVkZGhlJTU+VwOPTvf/9bqampGj9+vL744gu1a9dOklSnTh2tXLlSr732mjp27KipU6cqLCxM8+bNk5+fnySpfv36nve++uqrc2zr9ddfV4UKFfT111/rhhtuKLudBIBSRJgFAC/q1KmTpk+frpSUFL388svy9fVVz549tWnTJh0/flzXXnttjv5paWlq2bKlJCkuLk4dOnTwBNm/S0hI0GOPPaYVK1bo4MGDyszM1PHjx7V3795S3y8AKCuEWQDwoqCgINWrV0+SNGvWLDVv3lxvvPGGmjRpIklatGiRatSokWMdl8slSQoICCjwvQcOHKgjR45oypQpqlWrllwul9q1a6e0tLRS2BMA8A7CLACUEw6HQ48++qhGjhypbdu2yeVyae/everYsWOe/Zs1a6Y333xT6enpeY7Orlq1StOmTVO3bt0kSfv27dPhw4dLdR8AoKxxAhgAlCO33HKLfHx89Nprr+nBBx/UiBEj9Oabb2rnzp1av369Xn31Vb355puSpOHDhyspKUn//Oc/9eOPP2r79u3673//q61bt0qSLr74Yv33v//Vli1b9P3336tfv35nHc0FALthZBYAyhFfX18NHz5czz//vHbv3q0qVapowoQJ2rVrlypUqKBWrVrp0UcflSRVrlxZX375pR566CF17NhRPj4+atGihdq3by9JeuONN3TXXXepVatWioqK0vjx4/Xggw96c/cAoMRZxhjj7SIAAACA4mCaAQAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtgizAAAAsC3CLAAAAGyLMAsAAADbIswCAADAtv4fVUcu9KZJHJcAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "gradient boosting"
      ],
      "metadata": {
        "id": "Oo4ikUB8XjEQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "boost = GBC(n_estimators = 300, learning_rate = 0.05, random_state = 42)\n",
        "boost.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 98
        },
        "id": "UECi8_StXkD0",
        "outputId": "0da02d98-d86c-4196-af8c-a6accce394b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingClassifier(learning_rate=0.05, n_estimators=300,\n",
              "                           random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(learning_rate=0.05, n_estimators=300,\n",
              "                           random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GradientBoostingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\">?<span>Documentation for GradientBoostingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GradientBoostingClassifier(learning_rate=0.05, n_estimators=300,\n",
              "                           random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_test_boost = boost.predict_proba(X_test)[:,1]\n",
        "fpr_gb,tpr_gb,threshold = roc_curve(y_test,y_pred_test_boost,pos_label = 1)\n",
        "roc_auc_gb = auc(fpr_gb,tpr_gb)"
      ],
      "metadata": {
        "id": "lEvyBenOYe3E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr_gb,tpr_gb, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_gb)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "-FEsROFrYlm5",
        "outputId": "432e270d-b905-4b85-d9df-45c3a6d5856e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAfHNJREFUeJzt3XdYU9f/B/B32BtUhoAo7j1x1IkDRa17gBtH3VorX/e21tFaV9XWibgFN45q3XXVhVitG0WcKKIsmcn5/cGPaGRIMCEkvF/Pk0dycu/NJ1dC3jn33HMlQggBIiIiIh2hp+kCiIiIiFSJ4YaIiIh0CsMNERER6RSGGyIiItIpDDdERESkUxhuiIiISKcw3BAREZFOYbghIiIincJwQ0RERDqF4YZ0mqurK/r376/pMgqcpk2bomnTppou44tmzZoFiUSCyMhITZeS70gkEsyaNUsl2woLC4NEIoG/v79KtgcAly9fhpGREZ48eaKybapajx494OXlpekyCiSGG8o1f39/SCQS+c3AwADOzs7o378/nj9/runy8rX4+HjMmTMH1apVg5mZGaytrdG4cWNs2rQJ2nJFlNu3b2PWrFkICwvTdCkZSKVSbNiwAU2bNkXhwoVhbGwMV1dXDBgwAFevXtV0eSqxbds2LF26VNNlKMjLmqZOnYqePXuiRIkS8ramTZsq/E0yNTVFtWrVsHTpUshksky38/btW4wfPx7ly5eHiYkJChcuDE9PTxw8eDDL546JicHs2bNRvXp1WFhYwNTUFFWqVMHEiRPx4sUL+XITJ07E7t27cePGDdW9cMoZQZRLGzZsEADEjz/+KDZv3izWrl0rBg0aJPT19UXp0qVFQkKCpksUiYmJIjk5WdNlKHj16pWoXLmy0NPTE7169RKrV68Wy5YtE02aNBEAhLe3t0hNTdV0mV+0c+dOAUCcOnUqw2NJSUkiKSkp74sSQnz48EG0bt1aABBNmjQRCxcuFOvXrxfTp08X5cuXFxKJRDx9+lQIIcTMmTMFAPHmzRuN1Po1vv32W1GiRAm1bT8hIUGkpKQotU5WNclkMpGQkKCy3+vr168LAOLChQsK7e7u7qJYsWJi8+bNYvPmzWLJkiWiTp06AoCYMmVKhu3cvXtXODs7CyMjIzF06FCxdu1asXDhQlGjRg0BQIwbNy7DOqGhoaJkyZJCX19f9OjRQ6xYsUKsWbNGjBo1ShQpUkSULVtWYfm6deuKvn37quR1U84x3FCupYebK1euKLRPnDhRABABAQEaqkyzEhIShFQqzfJxT09PoaenJ/bv35/hsXHjxgkAYsGCBeosMVNxcXFKLZ9duNGkkSNHCgBiyZIlGR5LTU0VCxcuzNNwI5PJxIcPH1S+XXWEG6lU+lVfStQduNJ9//33onjx4kImkym0u7u7i8qVKyu0JSQkiBIlSghLS0uFcJWcnCyqVKkizMzMxD///KOwTmpqqvD29hYAxI4dO+TtKSkponr16sLMzEycPXs2Q13R0dEZQtSvv/4qzM3NRWxsbK5fLymP4YZyLatwc/DgQQFAzJs3T6H9zp07omvXrqJQoULC2NhYuLm5ZfoB/+7dO/HDDz+IEiVKCCMjI+Hs7Cz69u2r8AGUmJgoZsyYIUqXLi2MjIxEsWLFxPjx40ViYqLCtkqUKCF8fHyEEEJcuXJFABD+/v4ZnvPIkSMCgDhw4IC87dmzZ2LAgAHC3t5eGBkZiUqVKon169crrHfq1CkBQGzfvl1MnTpVODk5CYlEIt69e5fpPrt48aIAIAYOHJjp4ykpKaJs2bKiUKFC8g/Ex48fCwBi4cKFYvHixaJ48eLCxMRENGnSRNy8eTPDNnKyn9P/706fPi2GDx8u7OzshI2NjRBCiLCwMDF8+HBRrlw5YWJiIgoXLiy6desmHj9+nGH9z2/pQcfd3V24u7tn2E8BAQHip59+Es7OzsLY2Fg0b95cPHjwIMNrWLFihShZsqQwMTERderUEX///XeGbWbm6dOnwsDAQLRs2TLb5dKlh5sHDx4IHx8fYW1tLaysrET//v1FfHy8wrJ+fn6iWbNmws7OThgZGYmKFSuK33//PcM2S5QoIb799ltx5MgR4ebmJoyNjeVBK6fbEEKIw4cPiyZNmggLCwthaWkpateuLbZu3SqESNu/n+/7T0NFTt8fAMTIkSPFli1bRKVKlYSBgYHYu3ev/LGZM2fKl42JiRFjxoyRvy/t7OyEh4eHuHbt2hdrSv8d3rBhg8Lz37lzR3Tv3l3Y2toKExMTUa5cuUx7WD5XvHhx0b9//wztmYUbIYTo1q2bACBevHghb9u+fbu85zkz79+/FzY2NqJChQryth07dggAYu7cuV+sMd2NGzcEALFnz54cr0Nfz0Atx7qoQEsfg1GoUCF523///YeGDRvC2dkZkyZNgrm5OQIDA9GpUyfs3r0bnTt3BgDExcWhcePGuHPnDgYOHIhatWohMjISQUFBePbsGWxtbSGTydChQwecO3cOQ4YMQcWKFXHz5k0sWbIE9+/fx759+zKtq3bt2ihVqhQCAwPh4+Oj8FhAQAAKFSoET09PAEBERAS++eYbSCQSjBo1CnZ2dvjzzz8xaNAgxMTE4IcfflBYf86cOTAyMsK4ceOQlJQEIyOjTGs4cOAAAKBfv36ZPm5gYIBevXph9uzZOH/+PDw8POSPbdq0CbGxsRg5ciQSExOxbNkyNG/eHDdv3oSDg4NS+zndiBEjYGdnhxkzZiA+Ph4AcOXKFVy4cAE9evRAsWLFEBYWhj/++ANNmzbF7du3YWZmhiZNmuD777/Hb7/9hilTpqBixYoAIP83KwsWLICenh7GjRuH6Oho/PLLL+jduzcuXbokX+aPP/7AqFGj0LhxY4wdOxZhYWHo1KkTChUqhGLFimW7/T///BOpqano27dvtst9zsvLCyVLlsT8+fMRHByMdevWwd7eHj///LNCXZUrV0aHDh1gYGCAAwcOYMSIEZDJZBg5cqTC9u7du4eePXti6NChGDx4MMqXL6/UNvz9/TFw4EBUrlwZkydPho2NDa5fv44jR46gV69emDp1KqKjo/Hs2TMsWbIEAGBhYQEASr8/Tp48icDAQIwaNQq2trZwdXXNdB8NGzYMu3btwqhRo1CpUiW8ffsW586dw507d1CrVq1sa8rMv//+i8aNG8PQ0BBDhgyBq6srQkNDceDAAcydOzfL9Z4/f47w8HDUqlUry2U+lz6g2cbGRt72pfeitbU1OnbsiI0bN+Lhw4coU6YMgoKCAECp369KlSrB1NQU58+fz/D+IzXSdLoi7ZX+7f348ePizZs34unTp2LXrl3Czs5OGBsby7v+hRCiRYsWomrVqgrfHGUymWjQoIHCMeoZM2Zk+S0nvQt68+bNQk9PL0O38KpVqwQAcf78eXnbpz03QggxefJkYWhoKKKiouRtSUlJwsbGRqE3ZdCgQcLR0VFERkYqPEePHj2EtbW1vFclvUeiVKlSOTr00KlTJwEgy54dIYTYs2ePACB+++03IcTHb72mpqbi2bNn8uUuXbokAIixY8fK23K6n9P/7xo1apRhHERmryO9x2nTpk3ytuwOS2XVc1OxYkWFsTjLli0TAOQ9UElJSaJIkSKiTp06CuM9/P39BYAv9tyMHTtWABDXr1/Pdrl06T03n/ekde7cWRQpUkShLbP94unpKUqVKqXQVqJECQFAHDlyJMPyOdnG+/fvhaWlpahXr16GQ0SfHobJ6hCQMu8PAEJPT0/8999/GbaDz3purK2txciRIzMs96msasqs56ZJkybC0tJSPHnyJMvXmJnjx49n6GVN5+7uLipUqCDevHkj3rx5I+7evSvGjx8vAIhvv/1WYdkaNWoIa2vrbJ9r8eLFAoAICgoSQghRs2bNL66TmXLlyok2bdoovR7lHs+Woq/m4eEBOzs7uLi4oFu3bjA3N0dQUJD8W3ZUVBROnjwJLy8vxMbGIjIyEpGRkXj79i08PT3x4MED+dlVu3fvRvXq1TP9hiORSAAAO3fuRMWKFVGhQgX5tiIjI9G8eXMAwKlTp7Ks1dvbGykpKdizZ4+87a+//sL79+/h7e0NABBCYPfu3Wjfvj2EEArP4enpiejoaAQHByts18fHB6ampl/cV7GxsQAAS0vLLJdJfywmJkahvVOnTnB2dpbfr1u3LurVq4fDhw8DUG4/pxs8eDD09fUV2j59HSkpKXj79i3KlCkDGxubDK9bWQMGDFDo1WrcuDEA4NGjRwCAq1ev4u3btxg8eDAMDD52LPfu3VuhJzAr6fssu/2bmWHDhincb9y4Md6+favwf/DpfomOjkZkZCTc3d3x6NEjREdHK6xfsmRJeS/gp3KyjWPHjiE2NhaTJk2CiYmJwvrp74HsKPv+cHd3R6VKlb64XRsbG1y6dEnhbKDcevPmDf7++28MHDgQxYsXV3jsS6/x7du3AJDl78Pdu3dhZ2cHOzs7VKhQAQsXLkSHDh0ynIYeGxv7xd+Tz9+LMTExSv9updfK6QbyFg9L0VdbuXIlypUrh+joaPj5+eHvv/+GsbGx/PGHDx9CCIHp06dj+vTpmW7j9evXcHZ2RmhoKLp27Zrt8z148AB37tyBnZ1dltvKSvXq1VGhQgUEBARg0KBBANIOSdna2sr/+L958wbv37/HmjVrsGbNmhw9R8mSJbOtOV36H8bY2FiFLvJPZRWAypYtm2HZcuXKITAwEIBy+zm7uhMSEjB//nxs2LABz58/Vzg1/fMPcWV9/kGW/gH17t07AJDPWVKmTBmF5QwMDLI8XPIpKysrAB/3oSrqSt/m+fPnMXPmTFy8eBEfPnxQWD46OhrW1tby+1n9PuRkG6GhoQCAKlWqKPUa0in7/sjp7+4vv/wCHx8fuLi4wM3NDW3btkW/fv1QqlQppWtMD7O5fY0AspwywdXVFWvXroVMJkNoaCjmzp2LN2/eZAiKlpaWXwwcn78Xrays5LUrW2tOgimpDsMNfbW6deuidu3aANJ6Fxo1aoRevXrh3r17sLCwkM8vMW7cuEy/zQIZP8yyI5PJULVqVSxevDjTx11cXLJd39vbG3PnzkVkZCQsLS0RFBSEnj17ynsK0uvt06dPhrE56apVq6ZwPye9NkDamJR9+/bh33//RZMmTTJd5t9//wWAHH2b/lRu9nNmdY8ePRobNmzADz/8gPr168Pa2hoSiQQ9evTIcq6QnPq8lyhdVh9UyqpQoQIA4ObNm6hRo0aO1/tSXaGhoWjRogUqVKiAxYsXw8XFBUZGRjh8+DCWLFmSYb9ktl+V3UZuKfv+yOnvrpeXFxo3boy9e/fir7/+wsKFC/Hzzz9jz549aNOmzVfXnVNFihQB8DEQf87c3FxhrFrDhg1Rq1YtTJkyBb/99pu8vWLFiggJCUF4eHiGcJvu8/dihQoVcP36dTx9+vSLf2c+9e7du0y/nJD6MNyQSunr62P+/Plo1qwZVqxYgUmTJsm/2RkaGir80clM6dKlcevWrS8uc+PGDbRo0SJX34a8vb0xe/Zs7N69Gw4ODoiJiUGPHj3kj9vZ2cHS0hJSqfSL9SqrXbt2mD9/PjZt2pRpuJFKpdi2bRsKFSqEhg0bKjz24MGDDMvfv39f3qOhzH7Ozq5du+Dj44NFixbJ2xITE/H+/XuF5dTxTTR9QraHDx+iWbNm8vbU1FSEhYVlCJWfa9OmDfT19bFlyxalBxVn58CBA0hKSkJQUJDCB2F2h0Bzu43SpUsDAG7dupVt6M9q/3/t+yM7jo6OGDFiBEaMGIHXr1+jVq1amDt3rjzc5PT50n9Xv/Rez0x6gH38+HGOlq9WrRr69OmD1atXY9y4cfJ9365dO2zfvh2bNm3CtGnTMqwXExOD/fv3o0KFCvL/h/bt22P79u3YsmULJk+enKPnT01NxdOnT9GhQ4ccLU+qwTE3pHJNmzZF3bp1sXTpUiQmJsLe3h5NmzbF6tWr8fLlywzLv3nzRv5z165dcePGDezduzfDcunfor28vPD8+XOsXbs2wzIJCQnys36yUrFiRVStWhUBAQEICAiAo6OjQtDQ19dH165dsXv37kz/+H5ar7IaNGgADw8PbNiwIdMZUKdOnYr79+9jwoQJGb5R79u3T2HMzOXLl3Hp0iX5B4sy+zk7+vr6GXpSli9fDqlUqtBmbm4OABlCz9eoXbs2ihQpgrVr1yI1NVXevnXr1iy/qX/KxcUFgwcPxl9//YXly5dneFwmk2HRokV49uyZUnWl9+x8fohuw4YNKt9Gq1atYGlpifnz5yMxMVHhsU/XNTc3z/Qw4de+PzIjlUozPJe9vT2cnJyQlJT0xZo+Z2dnhyZNmsDPzw/h4eEKj32pF8/Z2RkuLi5KzTQ9YcIEpKSkKPRmdevWDZUqVcKCBQsybEsmk2H48OF49+4dZs6cqbBO1apVMXfuXFy8eDHD88TGxmLq1KkKbbdv30ZiYiIaNGiQ43rp67HnhtRi/Pjx6N69O/z9/TFs2DCsXLkSjRo1QtWqVTF48GCUKlUKERERuHjxIp49eyafnnz8+PHYtWsXunfvjoEDB8LNzQ1RUVEICgrCqlWrUL16dfTt2xeBgYEYNmwYTp06hYYNG0IqleLu3bsIDAzE0aNH5YfJsuLt7Y0ZM2bAxMQEgwYNgp6eYs5fsGABTp06hXr16mHw4MGoVKkSoqKiEBwcjOPHjyMqKirX+2bTpk1o0aIFOnbsiF69eqFx48ZISkrCnj17cPr0aXh7e2P8+PEZ1itTpgwaNWqE4cOHIykpCUuXLkWRIkUwYcIE+TI53c/ZadeuHTZv3gxra2tUqlQJFy9exPHjx+WHA9LVqFED+vr6+PnnnxEdHQ1jY2M0b94c9vb2ud43RkZGmDVrFkaPHo3mzZvDy8sLYWFh8Pf3R+nSpXPUM7Bo0SKEhobi+++/x549e9CuXTsUKlQI4eHh2LlzJ+7evavQU5cTrVq1gpGREdq3b4+hQ4ciLi4Oa9euhb29faZB8mu2YWVlhSVLluC7775DnTp10KtXLxQqVAg3btzAhw8fsHHjRgCAm5sbAgIC4Ovrizp16sDCwgLt27dXyfvjc7GxsShWrBi6desmv+TA8ePHceXKFYUevqxqysxvv/2GRo0aoVatWhgyZAhKliyJsLAwHDp0CCEhIdnW07FjR+zduzfHY1kqVaqEtm3bYt26dZg+fTqKFCkCIyMj7Nq1Cy1atECjRo0wYMAA1K5dG+/fv8e2bdsQHByM//3vfwq/K4aGhtizZw88PDzQpEkTeHl5oWHDhjA0NMR///0n73X99FT2Y8eOwczMDC1btvxinaRCeX+CFumKrCbxEyJtptPSpUuL0qVLy081Dg0NFf369RNFixYVhoaGwtnZWbRr107s2rVLYd23b9+KUaNGyadFL1asmPDx8VE4LTs5OVn8/PPPonLlysLY2FgUKlRIuLm5idmzZ4vo6Gj5cp+fCp7uwYMH8onGzp07l+nri4iIECNHjhQuLi7C0NBQFC1aVLRo0UKsWbNGvkz6Kc47d+5Uat/FxsaKWbNmicqVKwtTU1NhaWkpGjZsKPz9/TOcCvvpJH6LFi0SLi4uwtjYWDRu3FjcuHEjw7Zzsp+z+7979+6dGDBggLC1tRUWFhbC09NT3L17N9N9uXbtWlGqVCmhr6+fo0n8Pt9PWU3u9ttvv4kSJUoIY2NjUbduXXH+/Hnh5uYmWrdunYO9mzbD7Lp160Tjxo2FtbW1MDQ0FCVKlBADBgxQOE08qxmK0/fPpxMXBgUFiWrVqgkTExPh6uoqfv75Z+Hn55dhufRJ/DKT022kL9ugQQNhamoqrKysRN26dcX27dvlj8fFxYlevXoJGxubDJP45fT9gf+fxC8z+ORU8KSkJDF+/HhRvXp1YWlpKczNzUX16tUzTECYVU1Z/T/funVLdO7cWdjY2AgTExNRvnx5MX369Ezr+VRwcLAAkOF096wm8RNCiNOnT2c4vV0IIV6/fi18fX1FmTJlhLGxsbCxsREeHh7y078z8+7dOzFjxgxRtWpVYWZmJkxMTESVKlXE5MmTxcuXLxWWrVevnujTp88XXxOplkQILblKH1EBFRYWhpIlS2LhwoUYN26cpsvRCJlMBjs7O3Tp0iXTwy1U8LRo0QJOTk7YvHmzpkvJUkhICGrVqoXg4GClBrjT1+OYGyLKVxITEzOMu9i0aROioqLQtGlTzRRF+c68efMQEBAgnz4gP1qwYAG6devGYKMBHHNDRPnKP//8g7Fjx6J79+4oUqQIgoODsX79elSpUgXdu3fXdHmUT9SrVw/JycmaLiNbO3bs0HQJBRbDDRHlK66urnBxccFvv/2GqKgoFC5cGP369cOCBQuyvGYXEdGnOOaGiIiIdArH3BAREZFOYbghIiIinVLgxtzIZDK8ePEClpaWvJAZERGRlhBCIDY2Fk5OThkmXv1cgQs3L168UOqCZ0RERJR/PH36FMWKFct2mQIXbtIvXf/06VNYWVlpuBoiIiLKiZiYGLi4uMg/x7NT4MJN+qEoKysrhhsiIiItk5MhJRxQTERERDqF4YaIiIh0CsMNERER6RSGGyIiItIpDDdERESkUxhuiIiISKcw3BAREZFOYbghIiIincJwQ0RERDqF4YaIiIh0ikbDzd9//4327dvDyckJEokE+/bt++I6p0+fRq1atWBsbIwyZcrA399f7XUSERGR9tBouImPj0f16tWxcuXKHC3/+PFjfPvtt2jWrBlCQkLwww8/4LvvvsPRo0fVXCkRERFpC41eOLNNmzZo06ZNjpdftWoVSpYsiUWLFgEAKlasiHPnzmHJkiXw9PRUV5lEREQFhxCANCntlpqY8Wd5W/r9jz9/iEuAqUESJLJkwM0XMLLQyEvQqquCX7x4ER4eHgptnp6e+OGHH7JcJykpCUlJSfL7MTEx6iqPiIgo92SpSocJtSwvTc5V+TdeOMBrc3d83+gSRja8AlQZyHCTE69evYKDg4NCm4ODA2JiYpCQkABTU9MM68yfPx+zZ8/OqxKJiEibZNZLkVkAyFE4yMXy0sSP4UPINL03cu3mS3vU+20wklIN4BvkifolnqGWNOnLK6qJVoWb3Jg8eTJ8fX3l92NiYuDi4qLBioiISKGXIttwkElQUOXyueyl0HoSfcDABNA3/vivvjGgbwIY/P+/6W0Zlktf5uPPVfSM4XktBkGnE1ClgiWs2q8AzItq7OVpVbgpWrQoIiIiFNoiIiJgZWWVaa8NABgbG8PY2DgvyiMiyt+y7aVI70FQ4hBGVsvnJHxocS/FV/k8THwaGPSNFYNFbsNHdsunhxI91X78SwBs2J2AJUsuYtq0JjA21my80KpwU79+fRw+fFih7dixY6hfv76GKiIiyoEc91LkMkzkdHn2Unx9mPjS8tltX98IkEg0vTe+mhACK1ZcRsWKdvDwKCVvL1zYFHPmNNdgZR9pNNzExcXh4cOH8vuPHz9GSEgIChcujOLFi2Py5Ml4/vw5Nm3aBAAYNmwYVqxYgQkTJmDgwIE4efIkAgMDcejQIU29BCLKr9J7KbIKE58evshJr4Oyy396n70UGQ9lZBUKchI+lF1eT1/Te0JnvHuXgEGDgrB3713Y25vjxo1hKFpUM4OGs6PRcHP16lU0a9ZMfj99bIyPjw/8/f3x8uVLhIeHyx8vWbIkDh06hLFjx2LZsmUoVqwY1q1bx9PAibRNSjwQdgx4eirt5y8ROej5YC9FGj2DvAsT2W1fR3op6KPLl5/D23sXwsLeAwBev47HwYP38d13tTRbWCYkQgih6SLyUkxMDKytrREdHQ0rKytNl0NUcMQ+Ax4dBEIPAOEn0gKILvnaQZlfGybYS0FqIoTAkiX/YOLE40hNTeuFLFzYFP7+HdG+ffk8q0OZz2+tGnNDRFpECOB1cFqYCT2Q9rOqZeilyC4cZNZLodwZIVluX8+QvRSkk6KiEtC//z4cOHBf3taggQu2b++K4sWtNVhZ9hhuiEh1UhKApyfTwsyjg0Dc88yXs3ACSrUHSrcHrFy/vN2sTltlLwWR2ly48BQ9euzC06cfJ7+dOLEh5sxpBkPD/P3eY7ghoq8T/wp4dAgIDQKeHAdSP2S+nH2ttDBTun3az+zpIMq3YmOT0K7dNrx7lwgAsLU1w6ZNndCmTVkNV5YzDDdEpBwhgMib/3+4KQh4dTnz5fSNgeItgNIdgFLtAEvnvK2TiHLN0tIYK1e2Ra9ee9C4cXFs394Vzs7aM06V4YaIviw1CXh2+uP4mdjwzJczs08LMqU7ACU8AEPzPC2TiHJPCAHJJz2qPXtWhampIdq1KwcDAz0NVqY8hhvSDR8igb/HA9GPNF2J7hEy4HUIkBKX+eN21T6OnylaB5Bo1x9BooJOKpVh/vxzePEiFr///q3CY506VdBQVV+H4YZ0Q8hK4D9/TVdRMOgZAi7NPo6fsSqh6YqIKJciIuLQp89eHD+e9sWwcePi6Nmzqoar+noMN6Qbou5ougLdZmoLlGybFmZKtAKMtefYOxFl7sSJR+jdew8iItIm0tTTk+DZs5gvrKUdGG4oex/eAM/Ppg0izc8ib378edT7tPlISHU42yyRzpBKZfjxxzOYM+dv+Z92R0cLbNvWFU2bumq0NlVhuKGsJcUA68sAyVqU5E1tAeP8O7EUEZEmvXgRi9699+D06TB5W6tWpbF5c2fY2+vOCQAMN5S1N/9qV7ABAOdGmq6AiChfOnr0Ifr23Ys3b9LmotLXl2DOnGaYOLER9PR0q2eW4Yay8cmVjIu5p53im58ZWwFlu2m6CiKifEcIgV9/vSgPNs7OltixoxsaNSqu4crUg+GmIDszAbi7HQoh5lOpn1zY0LEeUGdcnpRFRESqJZFIsHlzZ1Svvgq1azth48ZOsLU103RZasNwU1DFPAWuLsz58kY8O4aISJvExibB0tJYfr9oUQv8888glChho3OHoT7HcFNQfT4hm6VL1ssWKg9U9lFvPUREpBIpKVJMmXICO3feRnDwUBQubCp/rGTJQhqsLO8w3OiC96HAw/2ALCXn63x4/fHnygOA1n6qr4uIiPLUkyfv0aPHbvzzzzMAwIAB+7Fvn7fCZRUKAoYbbSdLBQKbZ32tHyIiKhD27buLAQP24/37tCt5GxrqoXlzV80WpSEMN9ou7sXXBxsXd9XUQkREeS45WYoJE45h2bJL8raSJW0QENANdeo4a7AyzWG40SRZKiBN/rptfHqhyFLtgCqDlFvfqgTgUPPraiAiIo149OgdvL134erVF/K2bt0qYd269rC2LrgztTPcaMrtzcBfgwFp0peXzSmnBkDZTqrbHhER5Vt79tzBgAH7EROT9jliZKSPJUs8MXx47QI3xuZzDDeaEB0GHB+u2mADAIW189L0RESkvDdv4uXBpkyZwggM7IaaNR01XFX+wHCT14RI67FJSbsKK4pUAsyLfv127d3SrthMREQFwpAhbjh1Kgx6ehKsXt1OYU6bgo7hRl0SooDry4HYp4rtiW+B8ONpP1u6AD0vpl02gIiIKBshIa9Qo8bHL8MSiQSbNnWGoaFegT8M9TmGG3W5tgi4NC/7ZVquYbAhIqJsJSSk4IcfjmDNmmAEBfVA+/bl5Y8ZGelrsLL8S0/TBeis94+yf7z6cKBk67yphYiItNLdu5GoV28d1qwJBgD4+OxDZOQHDVeV/7HnRl3eP/j4c7fjiuNqDM0AK9c8L4mIiLTHpk03MHz4IXz4kDb7vKmpARYv9tTpC16qCsONOpyZAERc+3i/SCXAgiPYiYjoy+LjkzFq1J/w9w+Rt1WubIfAwO6oVMlOc4VpEYYbdbi/8+PPxjaAScG4UBkREX2d//57DS+vXbh9+428beDAGli+vC3MzAw1WJl2YbhRByH7+HOnA4BBwZ0lkoiIcubAgXvw9t6FhIRUAIC5uSFWrWqHPn2qabgy7cNwo0rvQ4FzUz9e68ncESjWSLM1ERGRVqha1QHGxgZISEhFtWoOCAzshvLlbTVdllZiuFGlywuAewEf7+tzQiUiIsoZV1cb+Pt3xJ9/PsSSJZ4wNeVhqNziqeCqFPdC8b7bDxopg4iI8jchBLZs+RexsYqX4enYsQJWrWrHYPOVGG5UKfrxx59HRQO1xmiuFiIiypdiYpLQs+du9O27F8OGHYIQQtMl6RyGG1X58AaIuvPxvpGF5mohIqJ8KTj4JWrVWo2AgP8AANu23cTFi880XJXuYbhRlYirivcl3LVERJRGCIEVKy6jfv31CA19BwCwtjbGrl3d0aCBi4ar0z0cUKwO1YZqugIiIson3r9PxKBBQdiz52Pvfp06TggI6IaSJTkPmjow3KiDhZOmKyAionzg8uXn8PbehbCw9/K2sWO/wYIFHrzopRox3BAREanBtWsv0KiRH1JS0iZ2LVTIBP7+ndChQ/kvrElfiwNDVIWj3YmI6BM1azqiVavSAID69YshJGQYg00eYc+NWkg0XQAREWmYnp4EGzd2wh9/XMXEiQ1haMjDUHmFPTdERERfSSYTWLjwPE6efKzQXqSIGaZNa8Jgk8fYc0NERPQV3ryJh4/PPvz550MULWqBkJChcHDgXGeaxJ4bleGYGyKigubs2SeoUWM1/vzzIQAgIiIOR4+GargqYs+NOkg45oaISJfJZALz55/FjBmnIZOlfbm1tzfHli2d0bJlaQ1XRww3RERESoiIiEPfvntx7NgjeVuzZq7YurULHB0tNVgZpWO4ISIiyqGTJx+jd+89ePUqDkBaR/3Mme6YNq0J9PU50iO/YLhRFc5zQ0Sk096/T0TnzgGIiUkCABQtaoFt27qgWbOSGq6MPseYqRYcc0NEpGtsbEywcmVbAEDLlqVw48YwBpt8ij03REREWRBCQPLJSSJ9+lSDjY0J2rYtCz09fpHNr9hzQ0RE9JnUVBmmTTuJUaMOZ3isXbtyDDb5HHtuVIZjboiIdMGzZzHo1Ws3zp4NBwC4u7vCy6uyhqsiZTDcqAPnuSEi0kqHDz9Av3578fZtAgBAX1+CiIg4DVdFymK4ISKiAi8lRYqpU09i4cIL8rbixa2xY0dX1K/vosHKKDcYboiIqEALD49Gjx67cPHiM3lbhw7lsWFDRxQubKrByii3GG5UhfPcEBFpnaCge+jffx/evUsEABga6uGXX1pizJh6CmdJkXZhuFELviGIiPI7IQSWLv1HHmxcXW0QGNgNdeo4a7gy+loaPxV85cqVcHV1hYmJCerVq4fLly9nu/zSpUtRvnx5mJqawsXFBWPHjkViYmIeVUtERLpCIpFgy5YusLMzQ5cuFXH9+lAGGx2h0Z6bgIAA+Pr6YtWqVahXrx6WLl0KT09P3Lt3D/b29hmW37ZtGyZNmgQ/Pz80aNAA9+/fR//+/SGRSLB48WINvAIiItIm0dGJsLY2kd93crLE1atD4OJixcNQOkSjPTeLFy/G4MGDMWDAAFSqVAmrVq2CmZkZ/Pz8Ml3+woULaNiwIXr16gVXV1e0atUKPXv2/GJvT97gmBsiovwqMTEVo0cfRo0aq/HuXYLCY8WLWzPY6BiNhZvk5GRcu3YNHh4eH4vR04OHhwcuXryY6ToNGjTAtWvX5GHm0aNHOHz4MNq2bZvl8yQlJSEmJkbhpn58kxAR5RcPH0ahQYP1WLHiCsLC3mPgwCAIngSi0zR2WCoyMhJSqRQODg4K7Q4ODrh7926m6/Tq1QuRkZFo1KgRhBBITU3FsGHDMGXKlCyfZ/78+Zg9e7ZKayciIu0QEHALgwcfQGxsMgDAxMQAbdqU0XBVpG4aH1CsjNOnT2PevHn4/fffERwcjD179uDQoUOYM2dOlutMnjwZ0dHR8tvTp0/zsGIiItKEhIQUDBt2ED167JYHm/Lli+DSpe8wZIgbD0PpOI313Nja2kJfXx8REREK7REREShatGim60yfPh19+/bFd999BwCoWrUq4uPjMWTIEEydOhV6ehmzmrGxMYyNjVX/Aj7HLk4ionzh3r1IeHntwr//fvx86du3Gn7//VtYWBhpsDLKKxrruTEyMoKbmxtOnDghb5PJZDhx4gTq16+f6TofPnzIEGD09fUBIH8dP+U3AiIijdi27Sbc3NbIg42pqQH8/Dpg48ZODDYFiEZPBff19YWPjw9q166NunXrYunSpYiPj8eAAQMAAP369YOzszPmz58PAGjfvj0WL16MmjVrol69enj48CGmT5+O9u3by0MOEREVXO/fJyI+PgUAUKmSHQIDu6Fy5YxTi5Bu02i48fb2xps3bzBjxgy8evUKNWrUwJEjR+SDjMPDwxV6aqZNmwaJRIJp06bh+fPnsLOzQ/v27TF37lxNvQQiIspHhg+vjVOnwmBpaYTly9vA3Jy9NQWRROSr4znqFxMTA2tra0RHR8PKykp1G36wFwjqkvZz4wVA3Ymq2zYREWUghMC1ay9Ru7aTQntKihSGhuzN1zXKfH5r1dlS2oNjboiI1CkuLhn9+u1DnTprcfjwA4XHGGyI4YaIiLTKv/9GoHbtNdiy5V8AQL9+e/H+Pa8xSB8x3BARkVYQQmDNmmuoW3ct7t17CwCwtDTCihVtYWNj8oW1qSDR6IBi3VKghi4REeWpmJgkDB16EDt23JK31axZFAEB3VC2bBENVkb5EcONOnCeGyIilbl+/SW8vHbh4cMoedvIkXXw66+tYGLCjzHKiL8VRESUb+3efRu9eu1BcrIUAGBtbYz16zuga9dKGq6M8jOGGyIiyrdq1XKEqakBkpOlqFPHCTt2dEOpUoU0XRblcww3qlKwpgsiIsoTJUsWgp9fR5w9+wQ//9wSRkY8zZu+jGdLqQXH3BARKUsIgfXrgxEXl6zQ3qVLRSxZ0prBhnKM4YaIiDQuKioBnToF4LvvDmDkyMOaLoe0HMMNERFp1MWLT1Gz5moEBd0DAGzadAPXrr3QcFWkzRhuVIZjboiIlCGTCSxceB5NmvgjPDwaAFCkiCkOHeoFNzenL6xNlDUOKFYHznNDRJStyMgP8PHZp3BdqEaNimP79q4oVkyFFzWmAonhhoiI8tTZs0/Qs+duPH8eCyDt++CUKY0xa1ZTGBjwgAJ9PYYbIiLKM//88wzNmm2EVJp2KN/Ozgxbt3ZBy5alNVwZ6RJGZFXhPDdERF9Ut66zPMg0a+aKGzeGMdiQyrHnRi045oaIKDN6ehJs2tQJGzaE4H//qw99fX7HJtXjbxUREamFVCrDjz+ewZkzYQrtdnbmmDChIYMNqQ17boiISOVevoxFnz57cfLkYzg5WSIkZCjs7Mw1XRYVEIzNKsMxN0REAHDsWChq1FiNkycfAwBevYrDqVNhmi2KChSGG3XgPDdEVAClpsowbdpJeHpuwevX8QAAJydLnDrlAy+vyhqujgoSHpYiIqKv9uxZDHr12o2zZ8PlbW3alMHGjZ14OIryHMMNERF9lT//fIC+fffi7dsEAIC+vgTz5rXAuHENoKfHnmzKeww3qsJ5boioAIqM/IDu3XciPj4FAODiYoUdO7qhQQMXDVdGBRnH3KgFv6kQUcFga2uGFSvaAgA6dCiPkJBhDDakcey5ISIipQghIPnkxIn+/WvAwcEcrVuXUWgn0hT23BARUY4kJ0vh63sUY8YcyfBYmzZlGWwo32DPjcpwzA0R6a7Hj9+hR4/duHz5OQDA3b0EunatpOGqiDLHcKMO/PZCRDpkz547GDhwP6KjkwAARkb6ePcuUcNVEWWN4YaIiDKVlJSKceP+wooVV+RtpUsXQkBAN7i5OWmwMqLsMdwQEVEGDx9Gwdt7F4KDX8rbvL0rY82a9rCyMtZgZURfxnCjKpznhoh0REDALQwefACxsckAAGNjfSxb1hpDhrhx0DBpBYYbteCbn4i0k0wmsHLlFXmwKVeuCAIDu6F69aIarowo577qVPDERA4oIyLSJXp6Emzb1hVFipiiT59quHZtCIMNaR2lw41MJsOcOXPg7OwMCwsLPHr0CAAwffp0rF+/XuUFEhGRer17l6Bwv1gxK4SEDMOmTZ1gYWGkoaqIck/pcPPTTz/B398fv/zyC4yMPv7SV6lSBevWrVNpcUREpD4fPqTgu++CULv2WkRHK/bEFytmxfE1pLWUDjebNm3CmjVr0Lt3b+jr68vbq1evjrt376q0OO3CAcVEpD1u336DunXXYv3663j06B2+++4ABE+MIB2h9IDi58+fo0yZMhnaZTIZUlJSVFKU9uO3HSLKv/z9QzBixCEkJKQCAMzMDNGhQzn21JDOUDrcVKpUCWfPnkWJEiUU2nft2oWaNWuqrDAiIlKtuLhkjBx5GJs23ZC3Va1qj8DA7qhQwVaDlRGpltLhZsaMGfDx8cHz588hk8mwZ88e3Lt3D5s2bcLBgwfVUSMREX2lmzcj4OW1C3fvRsrbBg+uhWXLWsPU1FCDlRGpntJjbjp27IgDBw7g+PHjMDc3x4wZM3Dnzh0cOHAALVu2VEeNWoLHqokof/Lzu466ddfJg42FhRG2beuCNWvaM9iQTsrVJH6NGzfGsWPHVF2L7uBxayLKR+LikpGYmDa+pkaNoggM7IayZYtouCoi9VG656ZUqVJ4+/Zthvb379+jVKlSKimKiIhUZ/TouujcuQJGjqyDixcHMdiQzlO65yYsLAxSqTRDe1JSEp4/f66SooiIKHeEELh8+Tnq1Ssmb5NIJAgM7A4Dg6+alJ5Ia+Q43AQFBcl/Pnr0KKytreX3pVIpTpw4AVdXV5UWp1U4PwQRaVh0dCK+++4Adu26jSNHesPT8+O0HQw2VJDkONx06tQJQNo3AB8fH4XHDA0N4erqikWLFqm0OO3FMTdElLeuXn0BL6+dePz4PQCgb9+9CA39HpaWxpotjEgDchxuZDIZAKBkyZK4cuUKbG05JwIRkaYJIfDbb5cwfvwxpKSk/Z22sTHBmjXtGWyowFJ6zM3jx4/VUQcRESkpKioBAwfux/799+Rt33xTDDt2dEWJEjaaK4xIw3J1Knh8fDzOnDmD8PBwJCcnKzz2/fffq6Qw7cMxN0SUd/755xm8vXchPDxa3jZuXH3Mm9cChob62axJpPuUDjfXr19H27Zt8eHDB8THx6Nw4cKIjIyEmZkZ7O3tC3C4+QTnuSEiNdq69V/0778fqalph6GKFDHFxo2d8O235TRcGVH+oPTw+bFjx6J9+/Z49+4dTE1N8c8//+DJkydwc3PDr7/+qo4aiYjoE/XqFYOpadp304YNXRASMozBhugTSvfchISEYPXq1dDT04O+vj6SkpJQqlQp/PLLL/Dx8UGXLl3UUScREf2/MmUKY926DggJeYUff2zG07yJPqP0O8LQ0BB6emmr2dvbIzw8HABgbW2Np0+fqrY6bcJ5bohIDWQygVWrriI+XnF8o5dXZcyb14LBhigTSvfc1KxZE1euXEHZsmXh7u6OGTNmIDIyEps3b0aVKlXUUaMW4pgbIvp6r1/Ho2/fvfjrr1Bcvvwcfn4dNV0SkVZQOvLPmzcPjo6OAIC5c+eiUKFCGD58ON68eYPVq1ervEAiooLo9Okw1KixCn/9FQoA8PcPwb//Rmi4KiLtoHTPTe3ateU/29vb48iRIyotiIioIJNKZZg79yxmzz4DmSztcLeDgzm2bu2CatUcNFwdkXZQ2cHa4OBgtGvXTun1Vq5cCVdXV5iYmKBevXq4fPlytsu/f/8eI0eOhKOjI4yNjVGuXDkcPnw4t2WrEMfcENHXefUqDq1abcHMmaflwaZFi5IICRmGFi1Kabg6Iu2hVLg5evQoxo0bhylTpuDRo0cAgLt376JTp06oU6eO/BINORUQEABfX1/MnDkTwcHBqF69Ojw9PfH69etMl09OTkbLli0RFhaGXbt24d69e1i7di2cnZ2Vel614zw3RKSk48cfoUaNVTh5Mm0WeD09CebMaYajR/ugaFELDVdHpF1yfFhq/fr1GDx4MAoXLox3795h3bp1WLx4MUaPHg1vb2/cunULFStWVOrJFy9ejMGDB2PAgAEAgFWrVuHQoUPw8/PDpEmTMizv5+eHqKgoXLhwAYaGhgBQsK9ETkQ64cyZMLRqtVl+0qWTkyW2besCd3dXjdZFpK1y3HOzbNky/Pzzz4iMjERgYCAiIyPx+++/4+bNm1i1apXSwSY5ORnXrl2Dh4fHx2L09ODh4YGLFy9muk5QUBDq16+PkSNHwsHBAVWqVMG8efMglUqzfJ6kpCTExMQo3IiI8pPGjUvAwyPtsFPr1mUQEjKUwYboK+Q43ISGhqJ79+4AgC5dusDAwAALFy5EsWLFcvXEkZGRkEqlcHBQHCDn4OCAV69eZbrOo0ePsGvXLkilUhw+fBjTp0/HokWL8NNPP2X5PPPnz4e1tbX85uLikqt6v4jz3BBRLunpSbB5c2csWeKJQ4d6wc7OXNMlEWm1HIebhIQEmJmZAQAkEgmMjY3lp4TnFZlMBnt7e6xZswZubm7w9vbG1KlTsWrVqizXmTx5MqKjo+W3vJlokGNuiChzKSlSTJ58HOfOhSu0OzhY4IcfvoGeHv9+EH0tpU4FX7duHSws0ga2paamwt/fH7a2tgrL5PTCmba2ttDX10dEhOK8DREREShatGim6zg6OsLQ0BD6+h+veFuxYkW8evUKycnJMDIyyrCOsbExjI2Nc1QTEZE6PX0ajR49duPChafYvPlfhIQMg62tmabLItI5OQ43xYsXx9q1a+X3ixYtis2bNyssI5FIchxujIyM4ObmhhMnTqBTp04A0npmTpw4gVGjRmW6TsOGDbFt2zbIZDL5JSDu378PR0fHTIMNEVF+cfDgffj47ENUVAIAICIiHufOhaNTpwoaroxI9+Q43ISFhan8yX19feHj44PatWujbt26WLp0KeLj4+VnT/Xr1w/Ozs6YP38+AGD48OFYsWIFxowZg9GjR+PBgweYN29ejgOVenHMDRFllJycdhhq8eJ/5G0lSlgjIKAb6tXL3ZhFIsqe0jMUq5K3tzfevHmDGTNm4NWrV6hRowaOHDkiH2QcHh4u76EBABcXFxw9ehRjx45FtWrV4OzsjDFjxmDixImaegmZ4zw3RAQgLOw9vL134fLl5/K2Tp0qwM+vAwoVMtVgZUS6TSJEwTrNJyYmBtbW1oiOjoaVlZXqNnxrA3B0YNrPLVcD1YaobttEpHX27r2DgQOD8P59IgDAyEgfv/7aEqNG1YWEX4CIlKbM57dGe26IiHRRREQcevfeg4SEVABAqVKFEBjYDW5uThqujKhgUNm1pQq8gtUBRkTZcHCwwPLlbQAA3btXQnDwEAYbojzEnhu1YJczUUEjkwmFOWoGDqyJ4sWt4eFRioehiPJYrnpuQkNDMW3aNPTs2VN+kcs///wT//33n0qLIyLK7xITUzFixCH4+h5VaJdIJGjZsjSDDZEGKB1uzpw5g6pVq+LSpUvYs2cP4uLiAAA3btzAzJkzVV4gEVF+df/+W3zzzTr88cdVLFt2Cfv23dV0SUSEXISbSZMm4aeffsKxY8cUJs5r3rw5/vnnn2zW1HUcc0NUkGzbdhNubmtw40baLOumpgaIi0vWcFVEBORizM3Nmzexbdu2DO329vaIjIxUSVHaj93QRLrqw4cUjBnzJ9atuy5vq1jRFoGB3VGlir0GKyOidEr33NjY2ODly5cZ2q9fvw5nZ2eVFEVElB/dufMG9eqtUwg2/fvXwJUrgxlsiPIRpcNNjx49MHHiRLx69QoSiQQymQznz5/HuHHj0K9fP3XUSESkcRs3hqB27bW4dSvtJAozM0Ns3NgJGzZ0hLk5r21HlJ8oHW7mzZuHChUqwMXFBXFxcahUqRKaNGmCBg0aYNq0aeqoUTtwnhsinSWVyrBmTTA+fEgBAFSpYo+rVwejX7/qGq6MiDKj9JgbIyMjrF27FtOnT8etW7cQFxeHmjVromzZsuqoTzvx1E8inaKvr4ft27uiZs3V6NKlApYtawMzM0NNl0VEWVA63Jw7dw6NGjVC8eLFUbx4cXXURESkUUIIREUloEgRM3lb8eLWuHVrOBwdLTVYGRHlhNKHpZo3b46SJUtiypQpuH37tjpqIiLSmNjYJPTuvQfffLMeMTFJCo8x2BBpB6XDzYsXL/C///0PZ86cQZUqVVCjRg0sXLgQz549U0d9WoRjboi0XUjIK7i5rcH27bfw8GEUhg49qOmSiCgXlA43tra2GDVqFM6fP4/Q0FB0794dGzduhKurK5o3b66OGrUQx9wQaRMhBP744wq++WYdHjyIAgBYWRmjS5cKGq6MiHLjqy6cWbJkSUyaNAnVq1fH9OnTcebMGVXVRUSUJ6KjEzF48AHs3PnxMLubmyMCArqhdOnCGqyMiHIrVxfOBIDz589jxIgRcHR0RK9evVClShUcOnRIlbUREanV1asvUKvWGoVg8/33dXH+/EAGGyItpnTPzeTJk7Fjxw68ePECLVu2xLJly9CxY0eYmZl9eWWdxjE3RNrk99+v4IcfjiAlRQYAsLExwYYNHdGpEw9FEWk7pcPN33//jfHjx8PLywu2trbqqEn7cZ4bonwvKSlVHmzq1XPGjh3d4Opqo9miiEgllA4358+fV0cdRER56ocfvsGZM09QpkxhzJvXAkZG+pouiYhUJEfhJigoCG3atIGhoSGCgoKyXbZDhw4qKYyISFVkMoGLF5+iYcOPE49KJBLs3u0Fff1cDz0konwqR+GmU6dOePXqFezt7dGpU6csl5NIJJBKpaqqTbvw2lJE+dLbtx/g47MPhw8/wF9/9YWHRyn5Yww2RLopR+9smUwGe3t7+c9Z3QpssMmAY26I8oPz58NRo8ZqHDr0AEIAffvulV/8koh0l9JfWzZt2oSkpKQM7cnJydi0aZNKiiIi+hoymcCCBefg7u6PZ89iAAC2tmbw9+/IC14SFQBKh5sBAwYgOjo6Q3tsbCwGDBigkqKIiHLr9et4tG27FZMnn4BUmna42N29BG7cGAZPzzIaro6I8oLSZ0sJISDJ5FTnZ8+ewdraWiVFaSeOuSHStDNnwtCz5268fBkHIG1WhunTm2D6dHcYGHB8DVFBkeNwU7NmTUgkEkgkErRo0QIGBh9XlUqlePz4MVq3bq2WIrUO57khynPr1wdjyJCDkMnSvmg4OJhj69YuaNGi1BfWJCJdk+Nwk36WVEhICDw9PWFhYSF/zMjICK6urujatavKCyQiyonGjUvAzMwQcXHJaNGiJLZs6YKiRS2+vCIR6Zwch5uZM2cCAFxdXeHt7Q0TExO1FUVEpKxy5YpgzZp2ePgwClOmNOZp3kQFmNJjbnx8fNRRh/bjPDdEeUYqlWHlyisYPLgWTE0/nv3Us2dVDVZFRPlFjsJN4cKFcf/+fdja2qJQoUKZDihOFxUVpbLitBfH3BCpy4sXsejVazfOnHmCW7deY82a9pouiYjymRyFmyVLlsDS0lL+c3bhhohIXY4ceYi+ffciMvIDAMDP7zp8feujQgVexJeIPspRuPn0UFT//v3VVQsRUaZSU2WYPv0kFiz4eOHeYsWssGNHVwYbIspA6RF3wcHBuHnzpvz+/v370alTJ0yZMgXJyckqLU67cMwNkTo8fRqNpk39FYJNu3blEBIyVOFCmERE6ZQON0OHDsX9+/cBAI8ePYK3tzfMzMywc+dOTJgwQeUFaiUetiNSiYMH76NGjdU4f/4pAMDAQA+//toSQUE9UKSImYarI6L8Sulwc//+fdSoUQMAsHPnTri7u2Pbtm3w9/fH7t27VV0fERVQx46Fon377YiKSgAAlChhjbNnB+B//2vAcX9ElC2lw40QAjKZDABw/PhxtG3bFgDg4uKCyMhI1VZHRAVW8+Yl0bx5SQBAp04VcP36UHzzTTENV0VE2kDpeW5q166Nn376CR4eHjhz5gz++OMPAMDjx4/h4OCg8gKJqGDS19fD1q1dsHfvHQwbVpu9NUSUY0r33CxduhTBwcEYNWoUpk6dijJl0q6yu2vXLjRo0EDlBWoNTuJHlGtJSan44YcjuHDhqUJ70aIWGD68DoMNESlF6Z6batWqKZwtlW7hwoXQ19dXSVHaj3+IiXIqNDQK3t67cO3aS+zdexfXrw9F4cKmmi6LiLSY0uEm3bVr13Dnzh0AQKVKlVCrVi2VFUVEBcPOnf/hu+8OICYmCQAQERGHS5eeoU2bshqujIi0mdLh5vXr1/D29saZM2dgY2MDAHj//j2aNWuGHTt2wM7OTtU1EpGOSUxMha/vUfzxx1V5W9myhREY2B01ahTVYGVEpAuUHnMzevRoxMXF4b///kNUVBSioqJw69YtxMTE4Pvvv1dHjVqCY26IcuL+/bf45pt1CsGmV6+quHZtCIMNEamE0j03R44cwfHjx1GxYkV5W6VKlbBy5Uq0atVKpcVpLQ5+JMrUtm03MXToQcTFpc1mbmJigOXL22DQoJocNExEKqN0uJHJZDA0NMzQbmhoKJ//hojoc8+exWDgwP1ISpICACpUsEVgYDdUrcopJIhItZQ+LNW8eXOMGTMGL168kLc9f/4cY8eORYsWLVRaHBHpjmLFrLBsWWsAgI9PdVy9OpjBhojUQumemxUrVqBDhw5wdXWFi4sLAODp06eoUqUKtmzZovICtQbnuSHKQCYT0NP7eLhpyBA3lCtXBM2aldRgVUSk65QONy4uLggODsaJEyfkp4JXrFgRHh4eKi9Oe3HsABVs8fHJGDHiMGxtTbFokae8XSKRMNgQkdopFW4CAgIQFBSE5ORktGjRAqNHj1ZXXUSkpW7deo3u3Xfi7t20a801beqK9u3La7gqIipIchxu/vjjD4wcORJly5aFqakp9uzZg9DQUCxcuFCd9RGRlhBCYP366xg9+k8kJqYCAMzNDeU/ExHllRwPKF6xYgVmzpyJe/fuISQkBBs3bsTvv/+uztq0DMfcUMEVG5uEPn32YvDgA/IwU726A4KDh6J798oaro6ICpoch5tHjx7Bx8dHfr9Xr15ITU3Fy5cv1VKYduOYGyo4QkJeoXbttdi27eM154YNc8M//3yHcuWKaLAyIiqocnxYKikpCebm5vL7enp6MDIyQkJCgloKI6L8TQiBVauuYuzYo/K5aywtjbBuXQd4ebG3hog0R6kBxdOnT4eZmZn8fnJyMubOnQtra2t52+LFi1VXHRHlW6mpMmzceEMebNzcHBEQ0A2lSxfWcGVEVNDlONw0adIE9+7dU2hr0KABHj16JL9fsKdP55gbKlgMDfWxY0c31Ky5Gn37VsPChS1hbKz07BJERCqX479Ep0+fVmMZOqZAhzzSVUIIvHnzAfb2Hw9Pu7ra4O7dkXBwsNBgZUREipS+/II6rFy5Eq6urjAxMUG9evVw+fLlHK23Y8cOSCQSdOrUSb0FEhVw794loGvXQDRuvAGxsUkKjzHYEFF+o/FwExAQAF9fX8ycORPBwcGoXr06PD098fr162zXCwsLw7hx49C4ceM8qpSoYLp06Rlq1lyNvXvv4v79txgx4rCmSyIiypbGw83ixYsxePBgDBgwAJUqVcKqVatgZmYGPz+/LNeRSqXo3bs3Zs+ejVKlSuVhtdngtaVIxwghsGjRBTRqtAFPnkQDAAoVMoGXVyUNV0ZElD2Nhpvk5GRcu3ZN4bpUenp68PDwwMWLF7Nc78cff4S9vT0GDRqUF2XmAsfckHZ7+/YDOnTYgXHjjiE1VQYAaNDABSEhw3gpBSLK9zR6akNkZCSkUikcHBwU2h0cHHD37t1M1zl37hzWr1+PkJCQHD1HUlISkpI+jhGIiYnJdb1EBcGFC0/Ro8cuPH368b0ycWJDzJnTDIaG+hqsjIgoZ3LVc3P27Fn06dMH9evXx/PnzwEAmzdvxrlz51Ra3OdiY2PRt29frF27Fra2tjlaZ/78+bC2tpbfXFxc1FojkTZbtOgCmjTZIA82trZm+PPP3liwwIPBhoi0htLhZvfu3fD09ISpqSmuX78u7xWJjo7GvHnzlNqWra0t9PX1ERERodAeERGBokWLZlg+NDQUYWFhaN++PQwMDGBgYIBNmzYhKCgIBgYGCA0NzbDO5MmTER0dLb89ffpUqRpzjmNuSPvJZAJSadrvcpMmJRASMhStW5fRcFVERMpROtz89NNPWLVqFdauXQtDQ0N5e8OGDREcHKzUtoyMjODm5oYTJ07I22QyGU6cOIH69etnWL5ChQq4efMmQkJC5LcOHTqgWbNmCAkJybRXxtjYGFZWVgo3teM8N6Sl/ve/BmjfvhymTWuMEyf6wdk5D94vREQqpvSYm3v37qFJkyYZ2q2trfH+/XulC/D19YWPjw9q166NunXrYunSpYiPj8eAAQMAAP369YOzszPmz58PExMTVKlSRWF9GxsbAMjQTkTZk0plOH/+KZo0KSFv09OTYN++HtDTY0AnIu2ldLgpWrQoHj58CFdXV4X2c+fO5eq0bG9vb7x58wYzZszAq1evUKNGDRw5ckQ+yDg8PBx6eho/Y51Ip7x6FYc+ffbg5MnHOH68H5o3Lyl/jMGGiLSd0uFm8ODBGDNmDPz8/CCRSPDixQtcvHgR48aNw/Tp03NVxKhRozBq1KhMH/vSZR/8/f1z9Zwqx3luSEucOPEIvXvvQUREPACgX7+9ePjwe5iY8LpQRKQblP5rNmnSJMhkMrRo0QIfPnxAkyZNYGxsjHHjxmH06NHqqFEL8Zsv5T9SqQyzZ5/BTz/9Lc/ijo4W2LKlC4MNEekUpf+iSSQSTJ06FePHj8fDhw8RFxeHSpUqwcKC15chyq9evIhFr167cebME3lbq1alsXlzZ4ULYRIR6YJcf10zMjJCpUqchp0ovzt69CH69NmLyMgPAAB9fQnmzGmGiRMbcXwNEekkpcNNs2bNIMnmVOeTJ09+VUHai2NuKP/5/fcrGDny44UunZ0tsWNHNzRqVFyDVRERqZfS4aZGjRoK91NSUhASEoJbt27Bx8dHVXVpN85zQ/lE8+YlYW5uiPj4FHz7bVn4+3eCra2ZpssiIlIrpcPNkiVLMm2fNWsW4uLivrogIlKdChVssXp1O7x8GQdf3/o8DEVEBYLKJpDp06cP/Pz8VLU5IlJSSooUv/56AQkJKQrtvXtXw7hxDRhsiKjAUNn5nxcvXoSJiYmqNqd9OM8NaVBY2Hv06LELly49x6NH7/D7799quiQiIo1ROtx06dJF4b4QAi9fvsTVq1dzPYmf7uE3ZMo7+/bdxYAB+/H+fSIAYN26YPzvf/VRunRhDVdGRKQZSocba2trhft6enooX748fvzxR7Rq1UplhRFR9pKSUjFx4nEsW3ZJ3laypA0CArox2BBRgaZUuJFKpRgwYACqVq2KQoUKqasmIvqC0NAoeHvvwrVrL+Vt3bpVwrp17WFtXYAPDxMRQckBxfr6+mjVqlWurv6t+zjmhvLGzp3/oVatNfJgY2Skj5Ur2yIwsBuDDRERcnFYqkqVKnj06BFKliz55YULKs5zQ2py8OB9eHntkt8vU6YwAgO7oWZNRw1WRUSUvyh9KvhPP/2EcePG4eDBg3j58iViYmIUbkSkPm3alIG7ewkAQM+eVRAcPITBhojoMznuufnxxx/xv//9D23btgUAdOjQQeEyDEIISCQSSKVS1VdJRAAAfX09bNvWFUeOPMSAATWyvRQKEVFBleNwM3v2bAwbNgynTp1SZz3ai/PckIp9+JACX9+jGDiwJurWdZa3OzlZYuDAmhqsjIgof8txuBH//+Ht7u6utmJ0B79N09e5c+cNvLx24dat1zh6NBTXrw+FjQ0HCxMR5YRSY27YBU6kfhs3hqB27bW4des1AOD163gEB7/8wlpERJROqbOlypUr98WAExUV9VUFERVU8fHJGDnyMDZuvCFvq1zZDoGB3VGpkp0GKyMi0i5KhZvZs2dnmKGY0nHMDeXerVuv4eW1E3fuRMrbBg6sgeXL28LMzFCDlRERaR+lwk2PHj1gb2+vrlp0CA/fUc4IIeDndx2jRv2JxMRUAIC5uSFWrWqHPn2qabg6IiLtlONww/E2RKr35Ek0Ro48jKSktCkUqlVzQGBgN5Qvb6vhyoiItFeOBxQLnupMpHKurjZYvNgTADB0qBv++WcQgw0R0VfKcc+NTCZTZx3aj+GPckAIAZlMQF//4/eK4cNro2pVezRuXEKDlRER6Q6lL79AOcBDeJSJ6OhE9OixG1OmnFBol0gkDDZERCqk9IUziUh51669gLf3LoSGvgMAuLu7om3bshquiohIN7HnhkiNhBBYvvwSGjTwkwcbGxsTSKU8zEtEpC7suVEZjrkhRe/eJWDQoCDs3XtX3la3rjMCArrB1dVGc4UREek4hhu14Jibgu7y5efw9t6FsLD38jZf328wf74HjIz0NVcYEVEBwHBDpEJCCCxZ8g8mTjyO1NS0Q0+FCplg48ZOaN++vIarIyIqGBhuiFQoJUWGHTtuyYNNgwYu2L69K4oX52VLiIjyCgcUqwzH3BBgZKSPHTu6wcbGBBMnNsTp0z4MNkREeYw9N+rAeW4KDJlM4M2beDg4WMjbSpUqhAcPRsPW1kyDlRERFVzsuSHKpTdv4vHtt9vQtOlGxMUlKzzGYENEpDkMN0S58PffT1CjxmocOfIQd+9GYtSow5ouiYiI/h/Djarw2lIFglQqw08//Y1mzTbixYtYAIC9vTn69Kmm4cqIiCgdx9yoBcfc6KKIiDj07r0HJ048lrc1b14SW7Z0hqOjpQYrIyKiTzHcEOXAiROP0Lv3HkRExAMA9PQkmDnTHVOnNla4wjcREWkeww3RF8yZcwYzZ56WH3l0dLTAtm1d0bSpq0brIiKizDHcEH2BoaG+PNi0alUamzd3hr29uWaLIiKiLDHcqAwHFOuqCRMa4ty5cDRo4IJJkxpBT49jqoiI8jOGG3XgJH5aKzVVhrNnn6BZs5LyNj09CYKCejLUEBFpCY6EJPp/z57FoFmzjfDw2IwzZ8IUHmOwISLSHgw3RAAOHbqPGjVW4dy5cMhkAj4++5CcLNV0WURElAsMN6rCSfy0UkqKFOPH/4V27bbj7dsEAEDx4tbYsaMbjIz0NVwdERHlBsfcqAUPYWiDJ0/eo0eP3fjnn2fyto4dy8PPryMKFzbVYGVERPQ1GG6oQNq37y4GDNiP9+8TAQCGhnpYuLAlvv++HiQcEE5EpNUYbqjAWbz4Iv73v7/k90uWtEFAQDfUqeOswaqIiEhVOOZGZTjmRlu0bl0GpqZpub5r14oIDh7KYENEpEPYc6MOPKyRr1WqZIdVq9ohNjYJI0bU4WEoIiIdw3BDOi0xMRVLl/6DsWO/gbHxx1/3fv2qa7AqIiJSJ4Yb0lkPHryFt/cuXL/+Cs+fx2D58raaLomIiPIAx9yoCue5yVe2b7+JWrXW4Pr1VwCAdeuuIzw8WsNVERFRXmC4UQuO4dCUhIQUDBlyAL167UFcXDIAoHz5Irh06TsUL26t4eqIiCgv8LAU6Yy7dyPh5bUTN2++lrf17VsNv//+LSwsjDRYGRER5SWGG9IJmzbdwPDhh/DhQwoAwNTUAL///i3696+h2cKIiCjP5YvDUitXroSrqytMTExQr149XL58Octl165di8aNG6NQoUIoVKgQPDw8sl0+73DMjabs3n0bPj775MGmcmU7XL06hMGGiKiA0ni4CQgIgK+vL2bOnIng4GBUr14dnp6eeP36dabLnz59Gj179sSpU6dw8eJFuLi4oFWrVnj+/HkeV54NzpuSpzp2rIBGjYoDAAYNqonLlwejUiU7DVdFRESaIhFCs6f51KtXD3Xq1MGKFSsAADKZDC4uLhg9ejQmTZr0xfWlUikKFSqEFStWoF+/fl9cPiYmBtbW1oiOjoaVldVX1y93YRZwcXbaz12PAK6eqts2fdGzZzE4e/YJevasqulSiIhIDZT5/NZoz01ycjKuXbsGDw8PeZuenh48PDxw8eLFHG3jw4cPSElJQeHChdVVJuUjcXHJGDhwP65efaHQXqyYFYMNEREB0PCA4sjISEilUjg4OCi0Ozg44O7duznaxsSJE+Hk5KQQkD6VlJSEpKQk+f2YmJjcF5wdznOjdjduvIKX1y7cv/8WZ848QXDwEFhbm2i6LCIiymc0PubmayxYsAA7duzA3r17YWKS+Yfc/PnzYW1tLb+5uLjkQWUcc6NKQgisXn0V9eqtw/37bwEAb97E499/IzRcGRER5UcaDTe2trbQ19dHRITih1RERASKFi2a7bq//vorFixYgL/++gvVqlXLcrnJkycjOjpafnv69KlKaqe8EROThJ49d2PYsENISpICAGrVckRw8FA0blxCw9UREVF+pNFwY2RkBDc3N5w4cULeJpPJcOLECdSvXz/L9X755RfMmTMHR44cQe3atbN9DmNjY1hZWSncSDsEB79ErVqrERDwn7xt9Oi6uHBhIMqU4RgrIiLKnMYn8fP19YWPjw9q166NunXrYunSpYiPj8eAAQMAAP369YOzszPmz58PAPj5558xY8YMbNu2Da6urnj1Ku3aQRYWFrCwsNDY6+A8N6ojhMDKlVfwv//9heTktN4aa2tj+Pl1RJcuFTVcHRER5XcaDzfe3t548+YNZsyYgVevXqFGjRo4cuSIfJBxeHg49PQ+djD98ccfSE5ORrdu3RS2M3PmTMyaNSsvS88Gx9x8jYcPo+DrexQpKTIAQJ06TggI6IaSJQtpuDIiItIGGp/nJq+pbZ6b8zOAf+ak/dz1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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "precision_gb, recall_gb, thresholds = precision_recall_curve(y_test, y_pred_test_boost)\n",
        "pr_auc_gb = average_precision_score(y_test,y_pred_test_boost)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall_gb, precision_gb, color='b', label='ROC curve (area = %0.2f)' % pr_auc_gb)\n",
        "plt.fill_between(recall_gb, precision_gb, color='skyblue', alpha=0.4)\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend(loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "l4SETEqaYqrv",
        "outputId": "4f1b140c-98cf-41c8-f291-6896cde9106e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "XGBoost"
      ],
      "metadata": {
        "id": "091KdtSrY2tX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier"
      ],
      "metadata": {
        "id": "JlHYcX2ObBTN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_xgb = XGBClassifier(n_estimators=300, learning_rate=0.05, max_depth=6, scale_pos_weight=5)\n",
        "best_xgb.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "z06G5DIRY9L3",
        "outputId": "9374aea4-18a1-40f6-a252-f22c50b13aab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.05, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.05, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.05, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "y_pred_xgb = best_xgb.predict_proba(X_test)[:,1]\n",
        "fpr_xg,tpr_xg,threshold = roc_curve(y_test,y_pred_xgb,pos_label = 1)\n",
        "roc_auc_xg = auc(fpr_xg,tpr_xg)"
      ],
      "metadata": {
        "id": "xvuRKGanZE31"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def real_cost_sensitive_obj(preds, dtrain, cost_fp=10, cost_fn=5000):\n",
        "    \"\"\"\n",
        "    Custom XGBoost loss that reflects real-world costs of false positives and false negatives.\n",
        "\n",
        "    Args:\n",
        "        preds: raw prediction scores\n",
        "        dtrain: DMatrix containing true labels\n",
        "        cost_fp: cost of false positive\n",
        "        cost_fn: cost of false negative\n",
        "    \"\"\"\n",
        "    labels = dtrain.get_label()\n",
        "    preds = 1.0 / (1.0 + np.exp(-preds))  # Sigmoid to get probabilities\n",
        "\n",
        "    alpha = cost_fn / cost_fp  # Real world penalty multiplier\n",
        "\n",
        "    grad = preds - labels  # Normal BCE gradient\n",
        "    grad = np.where(labels == 1, alpha * grad, grad)\n",
        "\n",
        "    hess = preds * (1.0 - preds)\n",
        "    hess = np.where(labels == 1, alpha * hess, hess)\n",
        "\n",
        "    return grad, hess\n"
      ],
      "metadata": {
        "id": "KMc9X2CmBbbV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "\n",
        "# Step 1: Convert to DMatrix\n",
        "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
        "dtest = xgb.DMatrix(X_test, label=y_test)\n",
        "\n",
        "# Step 2: Define parameters WITHOUT scale_pos_weight\n",
        "params = {\n",
        "    'max_depth': 6,\n",
        "    'eta': 0.05,\n",
        "    'objective': 'binary:logistic',  # required if you don't use custom\n",
        "    'eval_metric': 'auc',\n",
        "    'silent': 1\n",
        "}\n",
        "\n",
        "# Step 3: Train using the custom loss\n",
        "model = xgb.train(\n",
        "    params,\n",
        "    dtrain,\n",
        "    num_boost_round=300,\n",
        "    obj=lambda preds, dtrain: real_cost_sensitive_obj(preds, dtrain, cost_fp=10, cost_fn=5000),\n",
        "    evals=[(dtest, 'test')],\n",
        "    verbose_eval=True\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m3p9f4JlDBTT",
        "outputId": "18ffff0e-05dc-44c2-d1a5-3a8fc5ccfce9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [01:10:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"silent\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\ttest-auc:0.94700\n",
            "[1]\ttest-auc:0.94724\n",
            "[2]\ttest-auc:0.95458\n",
            "[3]\ttest-auc:0.95970\n",
            "[4]\ttest-auc:0.95933\n",
            "[5]\ttest-auc:0.95778\n",
            "[6]\ttest-auc:0.95573\n",
            "[7]\ttest-auc:0.95580\n",
            "[8]\ttest-auc:0.95446\n",
            "[9]\ttest-auc:0.95480\n",
            "[10]\ttest-auc:0.95347\n",
            "[11]\ttest-auc:0.95208\n",
            "[12]\ttest-auc:0.95148\n",
            "[13]\ttest-auc:0.95158\n",
            "[14]\ttest-auc:0.95189\n",
            "[15]\ttest-auc:0.95203\n",
            "[16]\ttest-auc:0.95235\n",
            "[17]\ttest-auc:0.95207\n",
            "[18]\ttest-auc:0.95883\n",
            "[19]\ttest-auc:0.95936\n",
            "[20]\ttest-auc:0.95866\n",
            "[21]\ttest-auc:0.95936\n",
            "[22]\ttest-auc:0.95714\n",
            "[23]\ttest-auc:0.95974\n",
            "[24]\ttest-auc:0.96052\n",
            "[25]\ttest-auc:0.96013\n",
            "[26]\ttest-auc:0.96036\n",
            "[27]\ttest-auc:0.95996\n",
            "[28]\ttest-auc:0.96296\n",
            "[29]\ttest-auc:0.96246\n",
            "[30]\ttest-auc:0.96351\n",
            "[31]\ttest-auc:0.96422\n",
            "[32]\ttest-auc:0.96718\n",
            "[33]\ttest-auc:0.96778\n",
            "[34]\ttest-auc:0.96781\n",
            "[35]\ttest-auc:0.97102\n",
            "[36]\ttest-auc:0.97040\n",
            "[37]\ttest-auc:0.97121\n",
            "[38]\ttest-auc:0.97122\n",
            "[39]\ttest-auc:0.97173\n",
            "[40]\ttest-auc:0.97209\n",
            "[41]\ttest-auc:0.97165\n",
            "[42]\ttest-auc:0.97122\n",
            "[43]\ttest-auc:0.97152\n",
            "[44]\ttest-auc:0.97177\n",
            "[45]\ttest-auc:0.97140\n",
            "[46]\ttest-auc:0.97116\n",
            "[47]\ttest-auc:0.97139\n",
            "[48]\ttest-auc:0.97116\n",
            "[49]\ttest-auc:0.97106\n",
            "[50]\ttest-auc:0.97104\n",
            "[51]\ttest-auc:0.97101\n",
            "[52]\ttest-auc:0.97073\n",
            "[53]\ttest-auc:0.97054\n",
            "[54]\ttest-auc:0.97081\n",
            "[55]\ttest-auc:0.97078\n",
            "[56]\ttest-auc:0.97116\n",
            "[57]\ttest-auc:0.97084\n",
            "[58]\ttest-auc:0.97070\n",
            "[59]\ttest-auc:0.97060\n",
            "[60]\ttest-auc:0.97047\n",
            "[61]\ttest-auc:0.97037\n",
            "[62]\ttest-auc:0.97031\n",
            "[63]\ttest-auc:0.97015\n",
            "[64]\ttest-auc:0.96999\n",
            "[65]\ttest-auc:0.97001\n",
            "[66]\ttest-auc:0.97042\n",
            "[67]\ttest-auc:0.97041\n",
            "[68]\ttest-auc:0.97024\n",
            "[69]\ttest-auc:0.97020\n",
            "[70]\ttest-auc:0.97009\n",
            "[71]\ttest-auc:0.96999\n",
            "[72]\ttest-auc:0.97251\n",
            "[73]\ttest-auc:0.97272\n",
            "[74]\ttest-auc:0.97265\n",
            "[75]\ttest-auc:0.97288\n",
            "[76]\ttest-auc:0.97254\n",
            "[77]\ttest-auc:0.97178\n",
            "[78]\ttest-auc:0.97137\n",
            "[79]\ttest-auc:0.97087\n",
            "[80]\ttest-auc:0.97054\n",
            "[81]\ttest-auc:0.97060\n",
            "[82]\ttest-auc:0.97062\n",
            "[83]\ttest-auc:0.97057\n",
            "[84]\ttest-auc:0.97051\n",
            "[85]\ttest-auc:0.97026\n",
            "[86]\ttest-auc:0.97031\n",
            "[87]\ttest-auc:0.97005\n",
            "[88]\ttest-auc:0.96975\n",
            "[89]\ttest-auc:0.96997\n",
            "[90]\ttest-auc:0.96995\n",
            "[91]\ttest-auc:0.97006\n",
            "[92]\ttest-auc:0.97012\n",
            "[93]\ttest-auc:0.96999\n",
            "[94]\ttest-auc:0.96980\n",
            "[95]\ttest-auc:0.96977\n",
            "[96]\ttest-auc:0.96981\n",
            "[97]\ttest-auc:0.96993\n",
            "[98]\ttest-auc:0.97004\n",
            "[99]\ttest-auc:0.97038\n",
            "[100]\ttest-auc:0.97050\n",
            "[101]\ttest-auc:0.97038\n",
            "[102]\ttest-auc:0.97017\n",
            "[103]\ttest-auc:0.97029\n",
            "[104]\ttest-auc:0.97025\n",
            "[105]\ttest-auc:0.97029\n",
            "[106]\ttest-auc:0.96939\n",
            "[107]\ttest-auc:0.96934\n",
            "[108]\ttest-auc:0.96908\n",
            "[109]\ttest-auc:0.96919\n",
            "[110]\ttest-auc:0.96901\n",
            "[111]\ttest-auc:0.96922\n",
            "[112]\ttest-auc:0.96917\n",
            "[113]\ttest-auc:0.96928\n",
            "[114]\ttest-auc:0.96916\n",
            "[115]\ttest-auc:0.96984\n",
            "[116]\ttest-auc:0.96990\n",
            "[117]\ttest-auc:0.96997\n",
            "[118]\ttest-auc:0.97004\n",
            "[119]\ttest-auc:0.97077\n",
            "[120]\ttest-auc:0.97077\n",
            "[121]\ttest-auc:0.97057\n",
            "[122]\ttest-auc:0.97058\n",
            "[123]\ttest-auc:0.97102\n",
            "[124]\ttest-auc:0.97081\n",
            "[125]\ttest-auc:0.97137\n",
            "[126]\ttest-auc:0.97112\n",
            "[127]\ttest-auc:0.97161\n",
            "[128]\ttest-auc:0.97136\n",
            "[129]\ttest-auc:0.97176\n",
            "[130]\ttest-auc:0.97237\n",
            "[131]\ttest-auc:0.97247\n",
            "[132]\ttest-auc:0.97232\n",
            "[133]\ttest-auc:0.97270\n",
            "[134]\ttest-auc:0.97301\n",
            "[135]\ttest-auc:0.97390\n",
            "[136]\ttest-auc:0.97434\n",
            "[137]\ttest-auc:0.97441\n",
            "[138]\ttest-auc:0.97488\n",
            "[139]\ttest-auc:0.97510\n",
            "[140]\ttest-auc:0.97545\n",
            "[141]\ttest-auc:0.97564\n",
            "[142]\ttest-auc:0.97552\n",
            "[143]\ttest-auc:0.97547\n",
            "[144]\ttest-auc:0.97591\n",
            "[145]\ttest-auc:0.97623\n",
            "[146]\ttest-auc:0.97642\n",
            "[147]\ttest-auc:0.97661\n",
            "[148]\ttest-auc:0.97666\n",
            "[149]\ttest-auc:0.97701\n",
            "[150]\ttest-auc:0.97711\n",
            "[151]\ttest-auc:0.97687\n",
            "[152]\ttest-auc:0.97726\n",
            "[153]\ttest-auc:0.97725\n",
            "[154]\ttest-auc:0.97739\n",
            "[155]\ttest-auc:0.97728\n",
            "[156]\ttest-auc:0.97715\n",
            "[157]\ttest-auc:0.97745\n",
            "[158]\ttest-auc:0.97774\n",
            "[159]\ttest-auc:0.97803\n",
            "[160]\ttest-auc:0.97799\n",
            "[161]\ttest-auc:0.97788\n",
            "[162]\ttest-auc:0.97788\n",
            "[163]\ttest-auc:0.97805\n",
            "[164]\ttest-auc:0.97812\n",
            "[165]\ttest-auc:0.97812\n",
            "[166]\ttest-auc:0.97825\n",
            "[167]\ttest-auc:0.97847\n",
            "[168]\ttest-auc:0.97851\n",
            "[169]\ttest-auc:0.97847\n",
            "[170]\ttest-auc:0.97863\n",
            "[171]\ttest-auc:0.97834\n",
            "[172]\ttest-auc:0.97845\n",
            "[173]\ttest-auc:0.97838\n",
            "[174]\ttest-auc:0.97837\n",
            "[175]\ttest-auc:0.97848\n",
            "[176]\ttest-auc:0.97843\n",
            "[177]\ttest-auc:0.97850\n",
            "[178]\ttest-auc:0.97849\n",
            "[179]\ttest-auc:0.97835\n",
            "[180]\ttest-auc:0.97840\n",
            "[181]\ttest-auc:0.97828\n",
            "[182]\ttest-auc:0.97838\n",
            "[183]\ttest-auc:0.97825\n",
            "[184]\ttest-auc:0.97819\n",
            "[185]\ttest-auc:0.97817\n",
            "[186]\ttest-auc:0.97826\n",
            "[187]\ttest-auc:0.97809\n",
            "[188]\ttest-auc:0.97801\n",
            "[189]\ttest-auc:0.97785\n",
            "[190]\ttest-auc:0.97789\n",
            "[191]\ttest-auc:0.97787\n",
            "[192]\ttest-auc:0.97783\n",
            "[193]\ttest-auc:0.97786\n",
            "[194]\ttest-auc:0.97777\n",
            "[195]\ttest-auc:0.97777\n",
            "[196]\ttest-auc:0.97804\n",
            "[197]\ttest-auc:0.97828\n",
            "[198]\ttest-auc:0.97847\n",
            "[199]\ttest-auc:0.97806\n",
            "[200]\ttest-auc:0.97790\n",
            "[201]\ttest-auc:0.97770\n",
            "[202]\ttest-auc:0.97766\n",
            "[203]\ttest-auc:0.97754\n",
            "[204]\ttest-auc:0.97738\n",
            "[205]\ttest-auc:0.97711\n",
            "[206]\ttest-auc:0.97696\n",
            "[207]\ttest-auc:0.97690\n",
            "[208]\ttest-auc:0.97667\n",
            "[209]\ttest-auc:0.97656\n",
            "[210]\ttest-auc:0.97654\n",
            "[211]\ttest-auc:0.97680\n",
            "[212]\ttest-auc:0.97663\n",
            "[213]\ttest-auc:0.97650\n",
            "[214]\ttest-auc:0.97629\n",
            "[215]\ttest-auc:0.97617\n",
            "[216]\ttest-auc:0.97616\n",
            "[217]\ttest-auc:0.97612\n",
            "[218]\ttest-auc:0.97609\n",
            "[219]\ttest-auc:0.97585\n",
            "[220]\ttest-auc:0.97583\n",
            "[221]\ttest-auc:0.97588\n",
            "[222]\ttest-auc:0.97580\n",
            "[223]\ttest-auc:0.97603\n",
            "[224]\ttest-auc:0.97620\n",
            "[225]\ttest-auc:0.97614\n",
            "[226]\ttest-auc:0.97595\n",
            "[227]\ttest-auc:0.97586\n",
            "[228]\ttest-auc:0.97608\n",
            "[229]\ttest-auc:0.97592\n",
            "[230]\ttest-auc:0.97594\n",
            "[231]\ttest-auc:0.97611\n",
            "[232]\ttest-auc:0.97598\n",
            "[233]\ttest-auc:0.97596\n",
            "[234]\ttest-auc:0.97597\n",
            "[235]\ttest-auc:0.97590\n",
            "[236]\ttest-auc:0.97574\n",
            "[237]\ttest-auc:0.97593\n",
            "[238]\ttest-auc:0.97583\n",
            "[239]\ttest-auc:0.97580\n",
            "[240]\ttest-auc:0.97563\n",
            "[241]\ttest-auc:0.97577\n",
            "[242]\ttest-auc:0.97594\n",
            "[243]\ttest-auc:0.97614\n",
            "[244]\ttest-auc:0.97632\n",
            "[245]\ttest-auc:0.97636\n",
            "[246]\ttest-auc:0.97609\n",
            "[247]\ttest-auc:0.97616\n",
            "[248]\ttest-auc:0.97623\n",
            "[249]\ttest-auc:0.97632\n",
            "[250]\ttest-auc:0.97629\n",
            "[251]\ttest-auc:0.97617\n",
            "[252]\ttest-auc:0.97625\n",
            "[253]\ttest-auc:0.97656\n",
            "[254]\ttest-auc:0.97652\n",
            "[255]\ttest-auc:0.97649\n",
            "[256]\ttest-auc:0.97639\n",
            "[257]\ttest-auc:0.97641\n",
            "[258]\ttest-auc:0.97645\n",
            "[259]\ttest-auc:0.97651\n",
            "[260]\ttest-auc:0.97634\n",
            "[261]\ttest-auc:0.97640\n",
            "[262]\ttest-auc:0.97637\n",
            "[263]\ttest-auc:0.97623\n",
            "[264]\ttest-auc:0.97627\n",
            "[265]\ttest-auc:0.97616\n",
            "[266]\ttest-auc:0.97623\n",
            "[267]\ttest-auc:0.97612\n",
            "[268]\ttest-auc:0.97619\n",
            "[269]\ttest-auc:0.97597\n",
            "[270]\ttest-auc:0.97617\n",
            "[271]\ttest-auc:0.97585\n",
            "[272]\ttest-auc:0.97583\n",
            "[273]\ttest-auc:0.97578\n",
            "[274]\ttest-auc:0.97580\n",
            "[275]\ttest-auc:0.97577\n",
            "[276]\ttest-auc:0.97570\n",
            "[277]\ttest-auc:0.97574\n",
            "[278]\ttest-auc:0.97577\n",
            "[279]\ttest-auc:0.97573\n",
            "[280]\ttest-auc:0.97565\n",
            "[281]\ttest-auc:0.97553\n",
            "[282]\ttest-auc:0.97559\n",
            "[283]\ttest-auc:0.97559\n",
            "[284]\ttest-auc:0.97559\n",
            "[285]\ttest-auc:0.97545\n",
            "[286]\ttest-auc:0.97549\n",
            "[287]\ttest-auc:0.97540\n",
            "[288]\ttest-auc:0.97542\n",
            "[289]\ttest-auc:0.97552\n",
            "[290]\ttest-auc:0.97545\n",
            "[291]\ttest-auc:0.97534\n",
            "[292]\ttest-auc:0.97529\n",
            "[293]\ttest-auc:0.97513\n",
            "[294]\ttest-auc:0.97505\n",
            "[295]\ttest-auc:0.97510\n",
            "[296]\ttest-auc:0.97504\n",
            "[297]\ttest-auc:0.97502\n",
            "[298]\ttest-auc:0.97521\n",
            "[299]\ttest-auc:0.97508\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_proba = model.predict(dtest)"
      ],
      "metadata": {
        "id": "rZgLh6OYDLt0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "pr_auc = average_precision_score(y_test, y_pred_proba)\n",
        "\n",
        "print(f\"PR AUC: {pr_auc:.4f}\")"
      ],
      "metadata": {
        "id": "71odpXCGDnJL",
        "outputId": "ce25f816-3b11-4e87-8774-160605b4f7c3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PR AUC: 0.8769\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr_xg,tpr_xg, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_xg)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bi33n8gcZMw1",
        "outputId": "758352c3-5919-4051-e98d-25cfc532c811"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "precision_xg, recall_xg, thresholds = precision_recall_curve(y_test, y_pred_xgb)\n",
        "pr_auc_xg = average_precision_score(y_test,y_pred_xgb)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall_xg, precision_xg, color='b', label='ROC curve (area = %0.2f)' % pr_auc_xg)\n",
        "\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "wEecU8q_ZQnI",
        "outputId": "544c62b0-1419-4ffa-b466-cf6f6a157232"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "combine it all"
      ],
      "metadata": {
        "id": "Wyx5ol3gf9l0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Plot the ROC curve\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(fpr_xg,tpr_xg, lw=2, color = 'blue', label='ROC curve for XGboost (AUC = %0.2f)' % roc_auc_xg)\n",
        "plt.plot(fpr_gb,tpr_gb, lw=2, color = 'orange' ,label='ROC curve for Gradient Boosting (AUC = %0.2f)' % roc_auc_gb)\n",
        "plt.plot(fpr_rf, tpr_rf, lw=2, color = 'green', label='ROC curve for Random Forest (AUC = %0.2f)' % roc_auc_rf)\n",
        "plt.plot(fpr_lr, tpr_lr, lw=2, color = 'red', label='ROC curve for Logistic Regression (AUC = %0.2f)' % roc_auc_lr)\n",
        "plt.plot(fpr_dt, tpr_dt, lw=2, color = 'purple', label='ROC curve for Decision Tree (AUC = %0.2f)' % roc_auc_dt)\n",
        "\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curves for Different Models')\n",
        "plt.legend(loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "6SAAsdWzf-jW",
        "outputId": "b6365182-cefc-4b36-f8dc-9e8c2df5b638"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import average_precision_score\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(recall_xg, precision_xg,color = 'blue', label='PR curve for XGboost (AUC = %0.2f)' % pr_auc_xg)\n",
        "plt.plot(recall_gb, precision_gb, color = 'orange' ,label='PR curve for Gradient Boosting (AUC = %0.2f)' % pr_auc_gb)\n",
        "plt.plot(recall_rf, precision_rf, color = 'green',label='PR curve for Random Forest (AUC = %0.2f)' % pr_auc_rf)\n",
        "plt.plot(recall_lr, precision_lr, color = 'red', label='PR curve for Logistic Regression (AUC = %0.2f)' % pr_auc_lr)\n",
        "plt.plot(recall_dt, precision_dt, color = 'purple',label='PR curve for Decision Tree (AUC = %0.2f)' % pr_auc_dt)\n",
        "\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve for Different Models')\n",
        "plt.legend(loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "cj3A1lbRg8vq",
        "outputId": "86b7452f-769c-45cd-a452-97aadcff4d25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}